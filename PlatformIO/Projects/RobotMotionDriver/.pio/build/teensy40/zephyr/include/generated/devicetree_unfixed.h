/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   teensy40.dts.pre.tmp
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE\dts\bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /cpus
 *   4   /cpus/cpu@0
 *   5   /cpus/cpu@0/mpu@e000ed90
 *   6   /leds
 *   7   /soc
 *   8   /soc/interrupt-controller@e000e100
 *   9   /soc/gpio@401bc000
 *   10  /leds/led-1
 *   11  /soc/ccm@400fc000
 *   12  /soc/can@401d0000
 *   13  /soc/can@401d4000
 *   14  /soc/can@401d8000
 *   15  /soc/csi@402bc000
 *   16  /soc/display-controller@402b8000
 *   17  /soc/dma-controller@400e8000
 *   18  /soc/gpio@400c0000
 *   19  /soc/gpio@401b8000
 *   20  /soc/gpio@401c0000
 *   21  /soc/gpio@401c4000
 *   22  /soc/gpt@401ec000
 *   23  /soc/gpt@401f0000
 *   24  /soc/i2c@403f0000
 *   25  /soc/i2c@403f4000
 *   26  /soc/i2c@403f8000
 *   27  /soc/i2c@403fc000
 *   28  /soc/iomuxc@401f8000
 *   29  /soc/random@400cc000
 *   30  /soc/semc0@402f0000
 *   31  /soc/spi@402a4000
 *   32  /soc/spi@40394000
 *   33  /soc/spi@40398000
 *   34  /soc/spi@4039c000
 *   35  /soc/spi@403a0000
 *   36  /soc/timer@e000e010
 *   37  /soc/uart@40184000
 *   38  /soc/uart@40188000
 *   39  /soc/uart@4018c000
 *   40  /soc/uart@40190000
 *   41  /soc/uart@40194000
 *   42  /soc/uart@40198000
 *   43  /soc/uart@4019c000
 *   44  /soc/uart@401a0000
 *   45  /system-clock
 *   46  /soc/usbd@402e0000
 *   47  /soc/usbd@402e0200
 *   48  /soc/usdhc@402c0000
 *   49  /soc/usdhc@402c4000
 *   50  /soc/wdog@400b8000
 *   51  /soc/wdog@400d0000
 *   52  /soc/ethernet@402d4000
 *   53  /soc/ethernet@402d4000/ptp
 *   54  /soc/ethernet@402d8000
 *   55  /soc/ethernet@402d8000/ptp
 *   56  /soc/flexpwm@403dc000
 *   57  /soc/flexpwm@403dc000/pwm0
 *   58  /soc/flexpwm@403dc000/pwm1
 *   59  /soc/flexpwm@403dc000/pwm2
 *   60  /soc/flexpwm@403dc000/pwm3
 *   61  /soc/flexpwm@403e0000
 *   62  /soc/flexpwm@403e0000/pwm0
 *   63  /soc/flexpwm@403e0000/pwm1
 *   64  /soc/flexpwm@403e0000/pwm2
 *   65  /soc/flexpwm@403e0000/pwm3
 *   66  /soc/flexpwm@403e4000
 *   67  /soc/flexpwm@403e4000/pwm0
 *   68  /soc/flexpwm@403e4000/pwm1
 *   69  /soc/flexpwm@403e4000/pwm2
 *   70  /soc/flexpwm@403e4000/pwm3
 *   71  /soc/flexpwm@403e8000
 *   72  /soc/flexpwm@403e8000/pwm0
 *   73  /soc/flexpwm@403e8000/pwm1
 *   74  /soc/flexpwm@403e8000/pwm2
 *   75  /soc/flexpwm@403e8000/pwm3
 *   76  /soc/flexram@400b0000
 *   77  /soc/flexram@400b0000/dtcm@20000000
 *   78  /soc/flexram@400b0000/itcm@0
 *   79  /soc/flexram@400b0000/ocram@20200000
 *   80  /soc/spi@402a8000
 *   81  /soc/spi@402a8000/w25q16jvuxim@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_system_clock) fn(DT_N_S_leds)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_system_clock) fn(DT_N_S_leds) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /cpus */ \
	6, /* /leds */ \
	7, /* /soc */ \
	45, /* /system-clock */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_nxp_mimxrt1062 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_nxp_mimxrt1062 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"nxp,mimxrt1062"}
#define DT_N_P_compatible_IDX_0 "nxp,mimxrt1062"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	4, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m7):
 *   $ZEPHYR_BASE\dts\bindings\cpu\arm,cortex-m7.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	3, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0/mpu@e000ed90 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m7 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m7 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m7"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m7"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0/mpu@e000ed90
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90
 *
 * Binding (compatible = arm,armv7m-mpu):
 *   $ZEPHYR_BASE\dts\bindings\mmu_mpu\arm,armv7m-mpu.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_PATH "/cpus/cpu@0/mpu@e000ed90"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_FULL_NAME "mpu@e000ed90"

/* Node parent (/cpus/cpu@0) identifier: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_PARENT DT_N_S_cpus_S_cpu_0
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_REQUIRES_ORDS \
	4, /* /cpus/cpu@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_EXISTS 1
#define DT_N_INST_0_arm_armv7m_mpu DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90
#define DT_N_NODELABEL_mpu         DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_REG_IDX_0_VAL_ADDRESS 3758157200 /* 0xe000ed90 */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_REG_IDX_0_VAL_SIZE 64 /* 0x40 */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_COMPAT_MATCHES_arm_armv7m_mpu 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg {3758157200 /* 0xe000ed90 */, 64 /* 0x40 */}
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_IDX_0 3758157200
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_IDX_1 64
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, reg, 0) \
	fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, reg, 1)
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, reg, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_arm_num_mpu_regions 16
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_arm_num_mpu_regions_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible {"arm,armv7m-mpu"}
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_IDX_0 "arm,armv7m-mpu"
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE\dts\bindings\gpio\gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_1)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_1) 
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	10, /* /leds/led-1 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flexram_400b0000) fn(DT_N_S_soc_S_spi_402a8000) fn(DT_N_S_soc_S_spi_402a4000) fn(DT_N_S_soc_S_semc0_402f0000) fn(DT_N_S_soc_S_gpt_401ec000) fn(DT_N_S_soc_S_gpt_401f0000) fn(DT_N_S_soc_S_ccm_400fc000) fn(DT_N_S_soc_S_gpio_401b8000) fn(DT_N_S_soc_S_gpio_401bc000) fn(DT_N_S_soc_S_gpio_401c0000) fn(DT_N_S_soc_S_gpio_401c4000) fn(DT_N_S_soc_S_gpio_400c0000) fn(DT_N_S_soc_S_i2c_403f0000) fn(DT_N_S_soc_S_i2c_403f4000) fn(DT_N_S_soc_S_i2c_403f8000) fn(DT_N_S_soc_S_i2c_403fc000) fn(DT_N_S_soc_S_iomuxc_401f8000) fn(DT_N_S_soc_S_display_controller_402b8000) fn(DT_N_S_soc_S_spi_40394000) fn(DT_N_S_soc_S_spi_40398000) fn(DT_N_S_soc_S_spi_4039c000) fn(DT_N_S_soc_S_spi_403a0000) fn(DT_N_S_soc_S_uart_40184000) fn(DT_N_S_soc_S_uart_40188000) fn(DT_N_S_soc_S_uart_4018c000) fn(DT_N_S_soc_S_uart_40190000) fn(DT_N_S_soc_S_uart_40194000) fn(DT_N_S_soc_S_uart_40198000) fn(DT_N_S_soc_S_uart_4019c000) fn(DT_N_S_soc_S_uart_401a0000) fn(DT_N_S_soc_S_flexpwm_403dc000) fn(DT_N_S_soc_S_flexpwm_403e0000) fn(DT_N_S_soc_S_flexpwm_403e4000) fn(DT_N_S_soc_S_flexpwm_403e8000) fn(DT_N_S_soc_S_ethernet_402d8000) fn(DT_N_S_soc_S_random_400cc000) fn(DT_N_S_soc_S_usbd_402e0000) fn(DT_N_S_soc_S_usbd_402e0200) fn(DT_N_S_soc_S_usdhc_402c0000) fn(DT_N_S_soc_S_usdhc_402c4000) fn(DT_N_S_soc_S_csi_402bc000) fn(DT_N_S_soc_S_dma_controller_400e8000) fn(DT_N_S_soc_S_can_401d0000) fn(DT_N_S_soc_S_can_401d4000) fn(DT_N_S_soc_S_can_401d8000) fn(DT_N_S_soc_S_wdog_400b8000) fn(DT_N_S_soc_S_wdog_400d0000) fn(DT_N_S_soc_S_ethernet_402d4000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_402a8000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_402a4000, __VA_ARGS__) fn(DT_N_S_soc_S_semc0_402f0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_401ec000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_401f0000, __VA_ARGS__) fn(DT_N_S_soc_S_ccm_400fc000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401b8000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401bc000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c4000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_400c0000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_403f0000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_403f4000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_403f8000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_403fc000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_401f8000, __VA_ARGS__) fn(DT_N_S_soc_S_display_controller_402b8000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40394000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_40398000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_4039c000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_403a0000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40184000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40188000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4018c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40190000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40194000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40198000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4019c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_401a0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403dc000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_402d8000, __VA_ARGS__) fn(DT_N_S_soc_S_random_400cc000, __VA_ARGS__) fn(DT_N_S_soc_S_usbd_402e0000, __VA_ARGS__) fn(DT_N_S_soc_S_usbd_402e0200, __VA_ARGS__) fn(DT_N_S_soc_S_usdhc_402c0000, __VA_ARGS__) fn(DT_N_S_soc_S_usdhc_402c4000, __VA_ARGS__) fn(DT_N_S_soc_S_csi_402bc000, __VA_ARGS__) fn(DT_N_S_soc_S_dma_controller_400e8000, __VA_ARGS__) fn(DT_N_S_soc_S_can_401d0000, __VA_ARGS__) fn(DT_N_S_soc_S_can_401d4000, __VA_ARGS__) fn(DT_N_S_soc_S_can_401d8000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_400b8000, __VA_ARGS__) fn(DT_N_S_soc_S_wdog_400d0000, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_402d4000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flexram_400b0000) fn(DT_N_S_soc_S_semc0_402f0000) fn(DT_N_S_soc_S_gpt_401ec000) fn(DT_N_S_soc_S_gpt_401f0000) fn(DT_N_S_soc_S_ccm_400fc000) fn(DT_N_S_soc_S_gpio_401b8000) fn(DT_N_S_soc_S_gpio_401bc000) fn(DT_N_S_soc_S_gpio_401c0000) fn(DT_N_S_soc_S_gpio_401c4000) fn(DT_N_S_soc_S_gpio_400c0000) fn(DT_N_S_soc_S_iomuxc_401f8000) fn(DT_N_S_soc_S_uart_40198000) fn(DT_N_S_soc_S_flexpwm_403dc000) fn(DT_N_S_soc_S_flexpwm_403e0000) fn(DT_N_S_soc_S_flexpwm_403e4000) fn(DT_N_S_soc_S_flexpwm_403e8000) fn(DT_N_S_soc_S_random_400cc000) fn(DT_N_S_soc_S_usbd_402e0000) fn(DT_N_S_soc_S_dma_controller_400e8000) fn(DT_N_S_soc_S_can_401d0000) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000, __VA_ARGS__) fn(DT_N_S_soc_S_semc0_402f0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_401ec000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_401f0000, __VA_ARGS__) fn(DT_N_S_soc_S_ccm_400fc000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401b8000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401bc000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c4000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_400c0000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_401f8000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_40198000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403dc000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000, __VA_ARGS__) fn(DT_N_S_soc_S_random_400cc000, __VA_ARGS__) fn(DT_N_S_soc_S_usbd_402e0000, __VA_ARGS__) fn(DT_N_S_soc_S_dma_controller_400e8000, __VA_ARGS__) fn(DT_N_S_soc_S_can_401d0000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	9, /* /soc/gpio@401bc000 */ \
	11, /* /soc/ccm@400fc000 */ \
	12, /* /soc/can@401d0000 */ \
	13, /* /soc/can@401d4000 */ \
	14, /* /soc/can@401d8000 */ \
	15, /* /soc/csi@402bc000 */ \
	16, /* /soc/display-controller@402b8000 */ \
	17, /* /soc/dma-controller@400e8000 */ \
	18, /* /soc/gpio@400c0000 */ \
	19, /* /soc/gpio@401b8000 */ \
	20, /* /soc/gpio@401c0000 */ \
	21, /* /soc/gpio@401c4000 */ \
	22, /* /soc/gpt@401ec000 */ \
	23, /* /soc/gpt@401f0000 */ \
	24, /* /soc/i2c@403f0000 */ \
	25, /* /soc/i2c@403f4000 */ \
	26, /* /soc/i2c@403f8000 */ \
	27, /* /soc/i2c@403fc000 */ \
	28, /* /soc/iomuxc@401f8000 */ \
	29, /* /soc/random@400cc000 */ \
	30, /* /soc/semc0@402f0000 */ \
	31, /* /soc/spi@402a4000 */ \
	32, /* /soc/spi@40394000 */ \
	33, /* /soc/spi@40398000 */ \
	34, /* /soc/spi@4039c000 */ \
	35, /* /soc/spi@403a0000 */ \
	36, /* /soc/timer@e000e010 */ \
	37, /* /soc/uart@40184000 */ \
	38, /* /soc/uart@40188000 */ \
	39, /* /soc/uart@4018c000 */ \
	40, /* /soc/uart@40190000 */ \
	41, /* /soc/uart@40194000 */ \
	42, /* /soc/uart@40198000 */ \
	43, /* /soc/uart@4019c000 */ \
	44, /* /soc/uart@401a0000 */ \
	46, /* /soc/usbd@402e0000 */ \
	47, /* /soc/usbd@402e0200 */ \
	48, /* /soc/usdhc@402c0000 */ \
	49, /* /soc/usdhc@402c4000 */ \
	50, /* /soc/wdog@400b8000 */ \
	51, /* /soc/wdog@400d0000 */ \
	52, /* /soc/ethernet@402d4000 */ \
	54, /* /soc/ethernet@402d8000 */ \
	56, /* /soc/flexpwm@403dc000 */ \
	61, /* /soc/flexpwm@403e0000 */ \
	66, /* /soc/flexpwm@403e4000 */ \
	71, /* /soc/flexpwm@403e8000 */ \
	76, /* /soc/flexram@400b0000 */ \
	80, /* /soc/spi@402a8000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v7m-nvic):
 *   $ZEPHYR_BASE\dts\bindings\interrupt-controller\arm,v7m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	9, /* /soc/gpio@401bc000 */ \
	12, /* /soc/can@401d0000 */ \
	13, /* /soc/can@401d4000 */ \
	14, /* /soc/can@401d8000 */ \
	15, /* /soc/csi@402bc000 */ \
	16, /* /soc/display-controller@402b8000 */ \
	17, /* /soc/dma-controller@400e8000 */ \
	18, /* /soc/gpio@400c0000 */ \
	19, /* /soc/gpio@401b8000 */ \
	20, /* /soc/gpio@401c0000 */ \
	21, /* /soc/gpio@401c4000 */ \
	22, /* /soc/gpt@401ec000 */ \
	23, /* /soc/gpt@401f0000 */ \
	24, /* /soc/i2c@403f0000 */ \
	25, /* /soc/i2c@403f4000 */ \
	26, /* /soc/i2c@403f8000 */ \
	27, /* /soc/i2c@403fc000 */ \
	29, /* /soc/random@400cc000 */ \
	30, /* /soc/semc0@402f0000 */ \
	31, /* /soc/spi@402a4000 */ \
	32, /* /soc/spi@40394000 */ \
	33, /* /soc/spi@40398000 */ \
	34, /* /soc/spi@4039c000 */ \
	35, /* /soc/spi@403a0000 */ \
	37, /* /soc/uart@40184000 */ \
	38, /* /soc/uart@40188000 */ \
	39, /* /soc/uart@4018c000 */ \
	40, /* /soc/uart@40190000 */ \
	41, /* /soc/uart@40194000 */ \
	42, /* /soc/uart@40198000 */ \
	43, /* /soc/uart@4019c000 */ \
	44, /* /soc/uart@401a0000 */ \
	46, /* /soc/usbd@402e0000 */ \
	47, /* /soc/usbd@402e0200 */ \
	48, /* /soc/usdhc@402c0000 */ \
	49, /* /soc/usdhc@402c4000 */ \
	50, /* /soc/wdog@400b8000 */ \
	51, /* /soc/wdog@400d0000 */ \
	52, /* /soc/ethernet@402d4000 */ \
	53, /* /soc/ethernet@402d4000/ptp */ \
	54, /* /soc/ethernet@402d8000 */ \
	55, /* /soc/ethernet@402d8000/ptp */ \
	56, /* /soc/flexpwm@403dc000 */ \
	57, /* /soc/flexpwm@403dc000/pwm0 */ \
	58, /* /soc/flexpwm@403dc000/pwm1 */ \
	59, /* /soc/flexpwm@403dc000/pwm2 */ \
	60, /* /soc/flexpwm@403dc000/pwm3 */ \
	61, /* /soc/flexpwm@403e0000 */ \
	62, /* /soc/flexpwm@403e0000/pwm0 */ \
	63, /* /soc/flexpwm@403e0000/pwm1 */ \
	64, /* /soc/flexpwm@403e0000/pwm2 */ \
	65, /* /soc/flexpwm@403e0000/pwm3 */ \
	66, /* /soc/flexpwm@403e4000 */ \
	67, /* /soc/flexpwm@403e4000/pwm0 */ \
	68, /* /soc/flexpwm@403e4000/pwm1 */ \
	69, /* /soc/flexpwm@403e4000/pwm2 */ \
	70, /* /soc/flexpwm@403e4000/pwm3 */ \
	71, /* /soc/flexpwm@403e8000 */ \
	72, /* /soc/flexpwm@403e8000/pwm0 */ \
	73, /* /soc/flexpwm@403e8000/pwm1 */ \
	74, /* /soc/flexpwm@403e8000/pwm2 */ \
	75, /* /soc/flexpwm@403e8000/pwm3 */ \
	76, /* /soc/flexram@400b0000 */ \
	80, /* /soc/spi@402a8000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v7m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 4
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v7m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@401bc000
 *
 * Node identifier: DT_N_S_soc_S_gpio_401bc000
 *
 * Binding (compatible = nxp,imx-gpio):
 *   $ZEPHYR_BASE\dts\bindings\gpio\nxp,imx-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_401bc000_PATH "/soc/gpio@401bc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_401bc000_FULL_NAME "gpio@401bc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_401bc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_401bc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_401bc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_401bc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_401bc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_401bc000_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_401bc000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_401bc000_SUPPORTS_ORDS \
	10, /* /leds/led-1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_401bc000_EXISTS 1
#define DT_N_INST_1_nxp_imx_gpio DT_N_S_soc_S_gpio_401bc000
#define DT_N_NODELABEL_gpio2     DT_N_S_soc_S_gpio_401bc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_401bc000_REG_NUM 1
#define DT_N_S_soc_S_gpio_401bc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_REG_IDX_0_VAL_ADDRESS 1075560448 /* 0x401bc000 */
#define DT_N_S_soc_S_gpio_401bc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_401bc000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_VAL_irq 82
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_VAL_irq 83
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_gpio_401bc000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_COMPAT_MATCHES_nxp_imx_gpio 1
#define DT_N_S_soc_S_gpio_401bc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_401bc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_401bc000_P_reg {1075560448 /* 0x401bc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_401bc000_P_reg_IDX_0 1075560448
#define DT_N_S_soc_S_gpio_401bc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_401bc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401bc000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_401bc000, reg, 1)
#define DT_N_S_soc_S_gpio_401bc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401bc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401bc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts {82 /* 0x52 */, 0 /* 0x0 */, 83 /* 0x53 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_0 82
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_2 83
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 3)
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401bc000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_label "GPIO_2"
#define DT_N_S_soc_S_gpio_401bc000_P_label_STRING_TOKEN GPIO_2
#define DT_N_S_soc_S_gpio_401bc000_P_label_STRING_UPPER_TOKEN GPIO_2
#define DT_N_S_soc_S_gpio_401bc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401bc000, label, 0) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 1) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 2) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 3) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 4) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 5)
#define DT_N_S_soc_S_gpio_401bc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401bc000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401bc000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401bc000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_401bc000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_ngpios 32
#define DT_N_S_soc_S_gpio_401bc000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_compatible {"nxp,imx-gpio"}
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_IDX_0 "nxp,imx-gpio"
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401bc000, compatible, 0)
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401bc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_401bc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_401bc000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_401bc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /leds/led-1
 *
 * Node identifier: DT_N_S_leds_S_led_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_1_PATH "/leds/led-1"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_1_FULL_NAME "led-1"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_1_PARENT DT_N_S_leds
#define DT_N_S_leds_S_led_1_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_1_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_1_REQUIRES_ORDS \
	6, /* /leds */ \
	9, /* /soc/gpio@401bc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_1_EXISTS 1
#define DT_N_ALIAS_led0          DT_N_S_leds_S_led_1
#define DT_N_NODELABEL_board_led DT_N_S_leds_S_led_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_1_REG_NUM 0
#define DT_N_S_leds_S_led_1_IRQ_NUM 0
#define DT_N_S_leds_S_led_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_401bc000
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin 3
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_LEN 1
#define DT_N_S_leds_S_led_1_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label "User LED Pin 13"
#define DT_N_S_leds_S_led_1_P_label_STRING_TOKEN User_LED_Pin_13
#define DT_N_S_leds_S_led_1_P_label_STRING_UPPER_TOKEN USER_LED_PIN_13
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, label, 0) \
	fn(DT_N_S_leds_S_led_1, label, 1) \
	fn(DT_N_S_leds_S_led_1, label, 2) \
	fn(DT_N_S_leds_S_led_1, label, 3) \
	fn(DT_N_S_leds_S_led_1, label, 4) \
	fn(DT_N_S_leds_S_led_1, label, 5) \
	fn(DT_N_S_leds_S_led_1, label, 6) \
	fn(DT_N_S_leds_S_led_1, label, 7) \
	fn(DT_N_S_leds_S_led_1, label, 8) \
	fn(DT_N_S_leds_S_led_1, label, 9) \
	fn(DT_N_S_leds_S_led_1, label, 10) \
	fn(DT_N_S_leds_S_led_1, label, 11) \
	fn(DT_N_S_leds_S_led_1, label, 12) \
	fn(DT_N_S_leds_S_led_1, label, 13) \
	fn(DT_N_S_leds_S_led_1, label, 14)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 11, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 12, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 13, __VA_ARGS__) \
	fn(DT_N_S_leds_S_led_1, label, 14, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_EXISTS 1

/*
 * Devicetree node: /soc/ccm@400fc000
 *
 * Node identifier: DT_N_S_soc_S_ccm_400fc000
 *
 * Binding (compatible = nxp,imx-ccm):
 *   $ZEPHYR_BASE\dts\bindings\clock\nxp,imx-ccm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ccm_400fc000_PATH "/soc/ccm@400fc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ccm_400fc000_FULL_NAME "ccm@400fc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ccm_400fc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ccm_400fc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ccm_400fc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ccm_400fc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ccm_400fc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ccm_400fc000_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ccm_400fc000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ccm_400fc000_SUPPORTS_ORDS \
	12, /* /soc/can@401d0000 */ \
	13, /* /soc/can@401d4000 */ \
	14, /* /soc/can@401d8000 */ \
	17, /* /soc/dma-controller@400e8000 */ \
	22, /* /soc/gpt@401ec000 */ \
	23, /* /soc/gpt@401f0000 */ \
	24, /* /soc/i2c@403f0000 */ \
	25, /* /soc/i2c@403f4000 */ \
	26, /* /soc/i2c@403f8000 */ \
	27, /* /soc/i2c@403fc000 */ \
	32, /* /soc/spi@40394000 */ \
	33, /* /soc/spi@40398000 */ \
	34, /* /soc/spi@4039c000 */ \
	35, /* /soc/spi@403a0000 */ \
	37, /* /soc/uart@40184000 */ \
	38, /* /soc/uart@40188000 */ \
	39, /* /soc/uart@4018c000 */ \
	40, /* /soc/uart@40190000 */ \
	41, /* /soc/uart@40194000 */ \
	42, /* /soc/uart@40198000 */ \
	43, /* /soc/uart@4019c000 */ \
	44, /* /soc/uart@401a0000 */ \
	48, /* /soc/usdhc@402c0000 */ \
	49, /* /soc/usdhc@402c4000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ccm_400fc000_EXISTS 1
#define DT_N_INST_0_nxp_imx_ccm DT_N_S_soc_S_ccm_400fc000
#define DT_N_NODELABEL_ccm      DT_N_S_soc_S_ccm_400fc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ccm_400fc000_REG_NUM 1
#define DT_N_S_soc_S_ccm_400fc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_REG_IDX_0_VAL_ADDRESS 1074774016 /* 0x400fc000 */
#define DT_N_S_soc_S_ccm_400fc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_ccm_400fc000_IRQ_NUM 0
#define DT_N_S_soc_S_ccm_400fc000_COMPAT_MATCHES_nxp_imx_ccm 1
#define DT_N_S_soc_S_ccm_400fc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ccm_400fc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ccm_400fc000_P_reg {1074774016 /* 0x400fc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_ccm_400fc000_P_reg_IDX_0 1074774016
#define DT_N_S_soc_S_ccm_400fc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_ccm_400fc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ccm_400fc000, reg, 0) \
	fn(DT_N_S_soc_S_ccm_400fc000, reg, 1)
#define DT_N_S_soc_S_ccm_400fc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ccm_400fc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ccm_400fc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_400fc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_label "CCM"
#define DT_N_S_soc_S_ccm_400fc000_P_label_STRING_TOKEN CCM
#define DT_N_S_soc_S_ccm_400fc000_P_label_STRING_UPPER_TOKEN CCM
#define DT_N_S_soc_S_ccm_400fc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ccm_400fc000, label, 0) \
	fn(DT_N_S_soc_S_ccm_400fc000, label, 1) \
	fn(DT_N_S_soc_S_ccm_400fc000, label, 2)
#define DT_N_S_soc_S_ccm_400fc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ccm_400fc000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ccm_400fc000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ccm_400fc000, label, 2, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_400fc000_P_label_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_compatible {"nxp,imx-ccm"}
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_IDX_0 "nxp,imx-ccm"
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ccm_400fc000, compatible, 0)
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ccm_400fc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_LEN 1
#define DT_N_S_soc_S_ccm_400fc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ccm_400fc000_P_wakeup_source 0
#define DT_N_S_soc_S_ccm_400fc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/can@401d0000
 *
 * Node identifier: DT_N_S_soc_S_can_401d0000
 *
 * Binding (compatible = nxp,kinetis-flexcan):
 *   $ZEPHYR_BASE\dts\bindings\can\nxp,kinetis-flexcan.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_401d0000_PATH "/soc/can@401d0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_401d0000_FULL_NAME "can@401d0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_401d0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_can_401d0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_401d0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_401d0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_401d0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_401d0000_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_401d0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_401d0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_401d0000_EXISTS 1
#define DT_N_INST_0_nxp_kinetis_flexcan DT_N_S_soc_S_can_401d0000
#define DT_N_NODELABEL_flexcan1         DT_N_S_soc_S_can_401d0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_401d0000_REG_NUM 1
#define DT_N_S_soc_S_can_401d0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_REG_IDX_0_VAL_ADDRESS 1075642368 /* 0x401d0000 */
#define DT_N_S_soc_S_can_401d0000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_401d0000_IRQ_NUM 1
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_irq 36
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_IRQ_NAME_common_VAL_irq DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_can_401d0000_IRQ_NAME_common_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_IRQ_NAME_common_VAL_priority DT_N_S_soc_S_can_401d0000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_can_401d0000_IRQ_NAME_common_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_COMPAT_MATCHES_nxp_kinetis_flexcan 1
#define DT_N_S_soc_S_can_401d0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_401d0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_can_401d0000_P_reg {1075642368 /* 0x401d0000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_401d0000_P_reg_IDX_0 1075642368
#define DT_N_S_soc_S_can_401d0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_401d0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, reg, 0) \
	fn(DT_N_S_soc_S_can_401d0000, reg, 1)
#define DT_N_S_soc_S_can_401d0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_interrupts {36 /* 0x24 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_can_401d0000_P_interrupts_IDX_0 36
#define DT_N_S_soc_S_can_401d0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_can_401d0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, interrupts, 0) \
	fn(DT_N_S_soc_S_can_401d0000, interrupts, 1)
#define DT_N_S_soc_S_can_401d0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_name 10
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_bits 14
#define DT_N_S_soc_S_can_401d0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, clocks, 0)
#define DT_N_S_soc_S_can_401d0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_401d0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_clk_source 2
#define DT_N_S_soc_S_can_401d0000_P_clk_source_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_label "CAN_1"
#define DT_N_S_soc_S_can_401d0000_P_label_STRING_TOKEN CAN_1
#define DT_N_S_soc_S_can_401d0000_P_label_STRING_UPPER_TOKEN CAN_1
#define DT_N_S_soc_S_can_401d0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, label, 0) \
	fn(DT_N_S_soc_S_can_401d0000, label, 1) \
	fn(DT_N_S_soc_S_can_401d0000, label, 2) \
	fn(DT_N_S_soc_S_can_401d0000, label, 3) \
	fn(DT_N_S_soc_S_can_401d0000, label, 4)
#define DT_N_S_soc_S_can_401d0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_label_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_bus_speed 125000
#define DT_N_S_soc_S_can_401d0000_P_bus_speed_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_sjw 1
#define DT_N_S_soc_S_can_401d0000_P_sjw_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_prop_seg 1
#define DT_N_S_soc_S_can_401d0000_P_prop_seg_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_phase_seg1 3
#define DT_N_S_soc_S_can_401d0000_P_phase_seg1_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_phase_seg2 2
#define DT_N_S_soc_S_can_401d0000_P_phase_seg2_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_status "okay"
#define DT_N_S_soc_S_can_401d0000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_can_401d0000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_can_401d0000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_can_401d0000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_can_401d0000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_can_401d0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, status, 0) \
	fn(DT_N_S_soc_S_can_401d0000, status, 1) \
	fn(DT_N_S_soc_S_can_401d0000, status, 2) \
	fn(DT_N_S_soc_S_can_401d0000, status, 3)
#define DT_N_S_soc_S_can_401d0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d0000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_compatible {"nxp,kinetis-flexcan"}
#define DT_N_S_soc_S_can_401d0000_P_compatible_IDX_0 "nxp,kinetis-flexcan"
#define DT_N_S_soc_S_can_401d0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, compatible, 0)
#define DT_N_S_soc_S_can_401d0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_401d0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names {"common"}
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_IDX_0 "common"
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d0000, interrupt_names, 0)
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d0000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_can_401d0000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_can_401d0000_P_wakeup_source 0
#define DT_N_S_soc_S_can_401d0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/can@401d4000
 *
 * Node identifier: DT_N_S_soc_S_can_401d4000
 *
 * Binding (compatible = nxp,kinetis-flexcan):
 *   $ZEPHYR_BASE\dts\bindings\can\nxp,kinetis-flexcan.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_401d4000_PATH "/soc/can@401d4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_401d4000_FULL_NAME "can@401d4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_401d4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_can_401d4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_401d4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_401d4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_401d4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_401d4000_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_401d4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_401d4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_401d4000_EXISTS 1
#define DT_N_INST_1_nxp_kinetis_flexcan DT_N_S_soc_S_can_401d4000
#define DT_N_NODELABEL_flexcan2         DT_N_S_soc_S_can_401d4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_401d4000_REG_NUM 1
#define DT_N_S_soc_S_can_401d4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_REG_IDX_0_VAL_ADDRESS 1075658752 /* 0x401d4000 */
#define DT_N_S_soc_S_can_401d4000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_401d4000_IRQ_NUM 1
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_irq 37
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_IRQ_NAME_common_VAL_irq DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_can_401d4000_IRQ_NAME_common_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_IRQ_NAME_common_VAL_priority DT_N_S_soc_S_can_401d4000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_can_401d4000_IRQ_NAME_common_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_COMPAT_MATCHES_nxp_kinetis_flexcan 1
#define DT_N_S_soc_S_can_401d4000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_401d4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_can_401d4000_P_reg {1075658752 /* 0x401d4000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_401d4000_P_reg_IDX_0 1075658752
#define DT_N_S_soc_S_can_401d4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_401d4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, reg, 0) \
	fn(DT_N_S_soc_S_can_401d4000, reg, 1)
#define DT_N_S_soc_S_can_401d4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_interrupts {37 /* 0x25 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_can_401d4000_P_interrupts_IDX_0 37
#define DT_N_S_soc_S_can_401d4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_can_401d4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, interrupts, 0) \
	fn(DT_N_S_soc_S_can_401d4000, interrupts, 1)
#define DT_N_S_soc_S_can_401d4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_name 10
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_bits 18
#define DT_N_S_soc_S_can_401d4000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, clocks, 0)
#define DT_N_S_soc_S_can_401d4000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_401d4000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_clk_source 2
#define DT_N_S_soc_S_can_401d4000_P_clk_source_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_label "CAN_2"
#define DT_N_S_soc_S_can_401d4000_P_label_STRING_TOKEN CAN_2
#define DT_N_S_soc_S_can_401d4000_P_label_STRING_UPPER_TOKEN CAN_2
#define DT_N_S_soc_S_can_401d4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, label, 0) \
	fn(DT_N_S_soc_S_can_401d4000, label, 1) \
	fn(DT_N_S_soc_S_can_401d4000, label, 2) \
	fn(DT_N_S_soc_S_can_401d4000, label, 3) \
	fn(DT_N_S_soc_S_can_401d4000, label, 4)
#define DT_N_S_soc_S_can_401d4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_label_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_sjw 1
#define DT_N_S_soc_S_can_401d4000_P_sjw_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_prop_seg 1
#define DT_N_S_soc_S_can_401d4000_P_prop_seg_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_phase_seg1 3
#define DT_N_S_soc_S_can_401d4000_P_phase_seg1_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_phase_seg2 2
#define DT_N_S_soc_S_can_401d4000_P_phase_seg2_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_status "disabled"
#define DT_N_S_soc_S_can_401d4000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_can_401d4000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_401d4000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_can_401d4000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_can_401d4000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_401d4000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, status, 0) \
	fn(DT_N_S_soc_S_can_401d4000, status, 1) \
	fn(DT_N_S_soc_S_can_401d4000, status, 2) \
	fn(DT_N_S_soc_S_can_401d4000, status, 3) \
	fn(DT_N_S_soc_S_can_401d4000, status, 4) \
	fn(DT_N_S_soc_S_can_401d4000, status, 5) \
	fn(DT_N_S_soc_S_can_401d4000, status, 6) \
	fn(DT_N_S_soc_S_can_401d4000, status, 7)
#define DT_N_S_soc_S_can_401d4000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d4000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_compatible {"nxp,kinetis-flexcan"}
#define DT_N_S_soc_S_can_401d4000_P_compatible_IDX_0 "nxp,kinetis-flexcan"
#define DT_N_S_soc_S_can_401d4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, compatible, 0)
#define DT_N_S_soc_S_can_401d4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_401d4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names {"common"}
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_IDX_0 "common"
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d4000, interrupt_names, 0)
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d4000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_can_401d4000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_can_401d4000_P_wakeup_source 0
#define DT_N_S_soc_S_can_401d4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/can@401d8000
 *
 * Node identifier: DT_N_S_soc_S_can_401d8000
 *
 * Binding (compatible = nxp,kinetis-flexcan):
 *   $ZEPHYR_BASE\dts\bindings\can\nxp,kinetis-flexcan.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_401d8000_PATH "/soc/can@401d8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_401d8000_FULL_NAME "can@401d8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_401d8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_can_401d8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_401d8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_401d8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_401d8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_401d8000_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_401d8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_401d8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_401d8000_EXISTS 1
#define DT_N_INST_2_nxp_kinetis_flexcan DT_N_S_soc_S_can_401d8000
#define DT_N_NODELABEL_flexcan3         DT_N_S_soc_S_can_401d8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_401d8000_REG_NUM 1
#define DT_N_S_soc_S_can_401d8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_REG_IDX_0_VAL_ADDRESS 1075675136 /* 0x401d8000 */
#define DT_N_S_soc_S_can_401d8000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_401d8000_IRQ_NUM 1
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_irq 154
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_IRQ_NAME_common_VAL_irq DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_can_401d8000_IRQ_NAME_common_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_IRQ_NAME_common_VAL_priority DT_N_S_soc_S_can_401d8000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_can_401d8000_IRQ_NAME_common_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_COMPAT_MATCHES_nxp_kinetis_flexcan 1
#define DT_N_S_soc_S_can_401d8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_401d8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_can_401d8000_P_reg {1075675136 /* 0x401d8000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_401d8000_P_reg_IDX_0 1075675136
#define DT_N_S_soc_S_can_401d8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_401d8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, reg, 0) \
	fn(DT_N_S_soc_S_can_401d8000, reg, 1)
#define DT_N_S_soc_S_can_401d8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_interrupts {154 /* 0x9a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_can_401d8000_P_interrupts_IDX_0 154
#define DT_N_S_soc_S_can_401d8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_can_401d8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, interrupts, 0) \
	fn(DT_N_S_soc_S_can_401d8000, interrupts, 1)
#define DT_N_S_soc_S_can_401d8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_name 10
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_offset 132
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_bits 6
#define DT_N_S_soc_S_can_401d8000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, clocks, 0)
#define DT_N_S_soc_S_can_401d8000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_401d8000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_clk_source 2
#define DT_N_S_soc_S_can_401d8000_P_clk_source_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_label "CAN_3"
#define DT_N_S_soc_S_can_401d8000_P_label_STRING_TOKEN CAN_3
#define DT_N_S_soc_S_can_401d8000_P_label_STRING_UPPER_TOKEN CAN_3
#define DT_N_S_soc_S_can_401d8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, label, 0) \
	fn(DT_N_S_soc_S_can_401d8000, label, 1) \
	fn(DT_N_S_soc_S_can_401d8000, label, 2) \
	fn(DT_N_S_soc_S_can_401d8000, label, 3) \
	fn(DT_N_S_soc_S_can_401d8000, label, 4)
#define DT_N_S_soc_S_can_401d8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_label_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_sjw 1
#define DT_N_S_soc_S_can_401d8000_P_sjw_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_prop_seg 1
#define DT_N_S_soc_S_can_401d8000_P_prop_seg_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_phase_seg1 3
#define DT_N_S_soc_S_can_401d8000_P_phase_seg1_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_phase_seg2 2
#define DT_N_S_soc_S_can_401d8000_P_phase_seg2_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_status "disabled"
#define DT_N_S_soc_S_can_401d8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_can_401d8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_401d8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_can_401d8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_can_401d8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_can_401d8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, status, 0) \
	fn(DT_N_S_soc_S_can_401d8000, status, 1) \
	fn(DT_N_S_soc_S_can_401d8000, status, 2) \
	fn(DT_N_S_soc_S_can_401d8000, status, 3) \
	fn(DT_N_S_soc_S_can_401d8000, status, 4) \
	fn(DT_N_S_soc_S_can_401d8000, status, 5) \
	fn(DT_N_S_soc_S_can_401d8000, status, 6) \
	fn(DT_N_S_soc_S_can_401d8000, status, 7)
#define DT_N_S_soc_S_can_401d8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_can_401d8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_compatible {"nxp,kinetis-flexcan"}
#define DT_N_S_soc_S_can_401d8000_P_compatible_IDX_0 "nxp,kinetis-flexcan"
#define DT_N_S_soc_S_can_401d8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, compatible, 0)
#define DT_N_S_soc_S_can_401d8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_401d8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names {"common"}
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_IDX_0 "common"
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_401d8000, interrupt_names, 0)
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_401d8000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_can_401d8000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_can_401d8000_P_wakeup_source 0
#define DT_N_S_soc_S_can_401d8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/csi@402bc000
 *
 * Node identifier: DT_N_S_soc_S_csi_402bc000
 *
 * Binding (compatible = nxp,imx-csi):
 *   $ZEPHYR_BASE\dts\bindings\video\nxp,imx-csi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_csi_402bc000_PATH "/soc/csi@402bc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_csi_402bc000_FULL_NAME "csi@402bc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_csi_402bc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_csi_402bc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_csi_402bc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_csi_402bc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_csi_402bc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_csi_402bc000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_csi_402bc000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_csi_402bc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_csi_402bc000_EXISTS 1
#define DT_N_INST_0_nxp_imx_csi DT_N_S_soc_S_csi_402bc000
#define DT_N_NODELABEL_csi      DT_N_S_soc_S_csi_402bc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_csi_402bc000_REG_NUM 1
#define DT_N_S_soc_S_csi_402bc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_REG_IDX_0_VAL_ADDRESS 1076609024 /* 0x402bc000 */
#define DT_N_S_soc_S_csi_402bc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_csi_402bc000_IRQ_NUM 1
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_VAL_irq 43
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_soc_S_csi_402bc000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_COMPAT_MATCHES_nxp_imx_csi 1
#define DT_N_S_soc_S_csi_402bc000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_csi_402bc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_csi_402bc000_P_interrupts {43 /* 0x2b */, 1 /* 0x1 */}
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_IDX_0 43
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_csi_402bc000, interrupts, 0) \
	fn(DT_N_S_soc_S_csi_402bc000, interrupts, 1)
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_csi_402bc000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_csi_402bc000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_label "CSI"
#define DT_N_S_soc_S_csi_402bc000_P_label_STRING_TOKEN CSI
#define DT_N_S_soc_S_csi_402bc000_P_label_STRING_UPPER_TOKEN CSI
#define DT_N_S_soc_S_csi_402bc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_csi_402bc000, label, 0) \
	fn(DT_N_S_soc_S_csi_402bc000, label, 1) \
	fn(DT_N_S_soc_S_csi_402bc000, label, 2)
#define DT_N_S_soc_S_csi_402bc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_csi_402bc000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, label, 2, __VA_ARGS__)
#define DT_N_S_soc_S_csi_402bc000_P_label_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_status "disabled"
#define DT_N_S_soc_S_csi_402bc000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_csi_402bc000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_csi_402bc000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_csi_402bc000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_csi_402bc000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_csi_402bc000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_csi_402bc000, status, 0) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 1) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 2) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 3) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 4) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 5) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 6) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 7)
#define DT_N_S_soc_S_csi_402bc000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_csi_402bc000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_csi_402bc000_P_status_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_compatible {"nxp,imx-csi"}
#define DT_N_S_soc_S_csi_402bc000_P_compatible_IDX_0 "nxp,imx-csi"
#define DT_N_S_soc_S_csi_402bc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_csi_402bc000, compatible, 0)
#define DT_N_S_soc_S_csi_402bc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_csi_402bc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_csi_402bc000_P_compatible_LEN 1
#define DT_N_S_soc_S_csi_402bc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_reg {1076609024 /* 0x402bc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_csi_402bc000_P_reg_IDX_0 1076609024
#define DT_N_S_soc_S_csi_402bc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_csi_402bc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_csi_402bc000, reg, 0) \
	fn(DT_N_S_soc_S_csi_402bc000, reg, 1)
#define DT_N_S_soc_S_csi_402bc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_csi_402bc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_csi_402bc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_csi_402bc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_csi_402bc000_P_wakeup_source 0
#define DT_N_S_soc_S_csi_402bc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/display-controller@402b8000
 *
 * Node identifier: DT_N_S_soc_S_display_controller_402b8000
 *
 * Binding (compatible = fsl,imx6sx-lcdif):
 *   $ZEPHYR_BASE\dts\bindings\display\fsl,imx6sx-lcdif.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_display_controller_402b8000_PATH "/soc/display-controller@402b8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_display_controller_402b8000_FULL_NAME "display-controller@402b8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_display_controller_402b8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_display_controller_402b8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_display_controller_402b8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_display_controller_402b8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_display_controller_402b8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_display_controller_402b8000_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_display_controller_402b8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_display_controller_402b8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_display_controller_402b8000_EXISTS 1
#define DT_N_INST_0_fsl_imx6sx_lcdif DT_N_S_soc_S_display_controller_402b8000
#define DT_N_NODELABEL_lcdif         DT_N_S_soc_S_display_controller_402b8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_display_controller_402b8000_REG_NUM 1
#define DT_N_S_soc_S_display_controller_402b8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_REG_IDX_0_VAL_ADDRESS 1076592640 /* 0x402b8000 */
#define DT_N_S_soc_S_display_controller_402b8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_NUM 1
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_VAL_irq 42
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_display_controller_402b8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_COMPAT_MATCHES_fsl_imx6sx_lcdif 1
#define DT_N_S_soc_S_display_controller_402b8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_display_controller_402b8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_display_controller_402b8000_P_reg {1076592640 /* 0x402b8000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_IDX_0 1076592640
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_display_controller_402b8000, reg, 0) \
	fn(DT_N_S_soc_S_display_controller_402b8000, reg, 1)
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_display_controller_402b8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_display_controller_402b8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts {42 /* 0x2a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_IDX_0 42
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_display_controller_402b8000, interrupts, 0) \
	fn(DT_N_S_soc_S_display_controller_402b8000, interrupts, 1)
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_display_controller_402b8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_display_controller_402b8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_label "ELCDIF_1"
#define DT_N_S_soc_S_display_controller_402b8000_P_label_STRING_TOKEN ELCDIF_1
#define DT_N_S_soc_S_display_controller_402b8000_P_label_STRING_UPPER_TOKEN ELCDIF_1
#define DT_N_S_soc_S_display_controller_402b8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_display_controller_402b8000, label, 0) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 1) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 2) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 3) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 4) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 5) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 6) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 7)
#define DT_N_S_soc_S_display_controller_402b8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_display_controller_402b8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_display_controller_402b8000_P_label_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_status "disabled"
#define DT_N_S_soc_S_display_controller_402b8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_display_controller_402b8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_display_controller_402b8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_display_controller_402b8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_display_controller_402b8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_display_controller_402b8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_display_controller_402b8000, status, 0) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 1) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 2) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 3) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 4) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 5) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 6) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 7)
#define DT_N_S_soc_S_display_controller_402b8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_display_controller_402b8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_display_controller_402b8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_display_controller_402b8000_P_status_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible {"fsl,imx6sx-lcdif"}
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_IDX_0 "fsl,imx6sx-lcdif"
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_display_controller_402b8000, compatible, 0)
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_display_controller_402b8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_LEN 1
#define DT_N_S_soc_S_display_controller_402b8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_display_controller_402b8000_P_wakeup_source 0
#define DT_N_S_soc_S_display_controller_402b8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/dma-controller@400e8000
 *
 * Node identifier: DT_N_S_soc_S_dma_controller_400e8000
 *
 * Binding (compatible = nxp,mcux-edma):
 *   $ZEPHYR_BASE\dts\bindings\dma\nxp,mcux-edma.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_dma_controller_400e8000_PATH "/soc/dma-controller@400e8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_dma_controller_400e8000_FULL_NAME "dma-controller@400e8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_dma_controller_400e8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_dma_controller_400e8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_dma_controller_400e8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_dma_controller_400e8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_dma_controller_400e8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_dma_controller_400e8000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_dma_controller_400e8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_dma_controller_400e8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_dma_controller_400e8000_EXISTS 1
#define DT_N_INST_0_nxp_mcux_edma DT_N_S_soc_S_dma_controller_400e8000
#define DT_N_NODELABEL_edma0      DT_N_S_soc_S_dma_controller_400e8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_dma_controller_400e8000_REG_NUM 2
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_0_VAL_ADDRESS 1074692096 /* 0x400e8000 */
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_1_VAL_ADDRESS 1074708480 /* 0x400ec000 */
#define DT_N_S_soc_S_dma_controller_400e8000_REG_IDX_1_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_NUM 17
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_VAL_irq 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_VAL_irq 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_VAL_irq 2
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_VAL_irq 3
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_3_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_VAL_irq 4
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_4_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_VAL_irq 5
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_5_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_VAL_irq 6
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_6_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_VAL_irq 7
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_7_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_VAL_irq 8
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_8_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_VAL_irq 9
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_9_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_VAL_irq 10
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_10_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_VAL_irq 11
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_11_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_VAL_irq 12
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_12_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_VAL_irq 13
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_13_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_VAL_irq 14
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_14_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_VAL_irq 15
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_15_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_VAL_irq 16
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_VAL_priority 0
#define DT_N_S_soc_S_dma_controller_400e8000_IRQ_IDX_16_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_COMPAT_MATCHES_nxp_mcux_edma 1
#define DT_N_S_soc_S_dma_controller_400e8000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_dma_controller_400e8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg {1074692096 /* 0x400e8000 */, 16384 /* 0x4000 */, 1074708480 /* 0x400ec000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_0 1074692096
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_2 1074708480
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_3 16384
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 0) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 1) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 2) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 3)
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts {0 /* 0x0 */, 0 /* 0x0 */, 1 /* 0x1 */, 0 /* 0x0 */, 2 /* 0x2 */, 0 /* 0x0 */, 3 /* 0x3 */, 0 /* 0x0 */, 4 /* 0x4 */, 0 /* 0x0 */, 5 /* 0x5 */, 0 /* 0x0 */, 6 /* 0x6 */, 0 /* 0x0 */, 7 /* 0x7 */, 0 /* 0x0 */, 8 /* 0x8 */, 0 /* 0x0 */, 9 /* 0x9 */, 0 /* 0x0 */, 10 /* 0xa */, 0 /* 0x0 */, 11 /* 0xb */, 0 /* 0x0 */, 12 /* 0xc */, 0 /* 0x0 */, 13 /* 0xd */, 0 /* 0x0 */, 14 /* 0xe */, 0 /* 0x0 */, 15 /* 0xf */, 0 /* 0x0 */, 16 /* 0x10 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_2 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_4 2
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_5 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_6 3
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_7 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_8 4
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_9 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_9_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_10 5
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_10_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_11 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_11_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_12 6
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_12_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_13 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_13_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_14 7
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_14_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_15 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_15_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_16 8
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_16_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_17 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_17_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_18 9
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_18_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_19 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_19_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_20 10
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_20_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_21 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_21_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_22 11
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_22_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_23 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_23_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_24 12
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_24_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_25 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_25_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_26 13
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_26_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_27 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_27_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_28 14
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_28_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_29 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_29_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_30 15
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_30_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_31 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_31_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_32 16
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_32_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_33 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_IDX_33_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 0) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 1) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 2) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 3) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 4) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 5) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 6) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 7) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 8) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 9) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 10) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 11) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 12) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 13) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 14) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 15) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 16) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 17) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 18) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 19) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 20) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 21) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 22) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 23) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 24) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 25) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 26) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 27) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 28) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 29) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 30) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 31) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 32) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 33)
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 15, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 16, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 17, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 18, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 19, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 20, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 21, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 22, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 23, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 24, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 25, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 26, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 27, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 28, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 29, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 30, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 31, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 32, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, interrupts, 33, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_dma_channels 32
#define DT_N_S_soc_S_dma_controller_400e8000_P_dma_channels_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_dma_requests 128
#define DT_N_S_soc_S_dma_controller_400e8000_P_dma_requests_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_nxp_mem2mem 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_nxp_mem2mem_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_nxp_a_on 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_nxp_a_on_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_label "DMA_0"
#define DT_N_S_soc_S_dma_controller_400e8000_P_label_STRING_TOKEN DMA_0
#define DT_N_S_soc_S_dma_controller_400e8000_P_label_STRING_UPPER_TOKEN DMA_0
#define DT_N_S_soc_S_dma_controller_400e8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, label, 0) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 1) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 2) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 3) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 4)
#define DT_N_S_soc_S_dma_controller_400e8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_label_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_status "okay"
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, status, 0) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 1) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 2) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 3)
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dma_controller_400e8000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_status_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible {"nxp,mcux-edma"}
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_IDX_0 "nxp,mcux-edma"
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, compatible, 0)
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_LEN 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_name 8
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_offset 124
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_bits 192
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_controller_400e8000, clocks, 0)
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_LEN 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_dma_controller_400e8000_P_wakeup_source 0
#define DT_N_S_soc_S_dma_controller_400e8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@400c0000
 *
 * Node identifier: DT_N_S_soc_S_gpio_400c0000
 *
 * Binding (compatible = nxp,imx-gpio):
 *   $ZEPHYR_BASE\dts\bindings\gpio\nxp,imx-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_400c0000_PATH "/soc/gpio@400c0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_400c0000_FULL_NAME "gpio@400c0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_400c0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_400c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_400c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_400c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_400c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_400c0000_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_400c0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_400c0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_400c0000_EXISTS 1
#define DT_N_INST_4_nxp_imx_gpio DT_N_S_soc_S_gpio_400c0000
#define DT_N_NODELABEL_gpio5     DT_N_S_soc_S_gpio_400c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_400c0000_REG_NUM 1
#define DT_N_S_soc_S_gpio_400c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_REG_IDX_0_VAL_ADDRESS 1074528256 /* 0x400c0000 */
#define DT_N_S_soc_S_gpio_400c0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_400c0000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_VAL_irq 88
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_VAL_irq 89
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_gpio_400c0000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_COMPAT_MATCHES_nxp_imx_gpio 1
#define DT_N_S_soc_S_gpio_400c0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_400c0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_400c0000_P_reg {1074528256 /* 0x400c0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_400c0000_P_reg_IDX_0 1074528256
#define DT_N_S_soc_S_gpio_400c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_400c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_400c0000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_400c0000, reg, 1)
#define DT_N_S_soc_S_gpio_400c0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_400c0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_400c0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts {88 /* 0x58 */, 0 /* 0x0 */, 89 /* 0x59 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_0 88
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_2 89
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 3)
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_400c0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_label "GPIO_5"
#define DT_N_S_soc_S_gpio_400c0000_P_label_STRING_TOKEN GPIO_5
#define DT_N_S_soc_S_gpio_400c0000_P_label_STRING_UPPER_TOKEN GPIO_5
#define DT_N_S_soc_S_gpio_400c0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_400c0000, label, 0) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 1) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 2) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 3) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 4) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 5)
#define DT_N_S_soc_S_gpio_400c0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_400c0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_400c0000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_400c0000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_400c0000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_ngpios 32
#define DT_N_S_soc_S_gpio_400c0000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_compatible {"nxp,imx-gpio"}
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_IDX_0 "nxp,imx-gpio"
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_400c0000, compatible, 0)
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_400c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_400c0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_400c0000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_400c0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@401b8000
 *
 * Node identifier: DT_N_S_soc_S_gpio_401b8000
 *
 * Binding (compatible = nxp,imx-gpio):
 *   $ZEPHYR_BASE\dts\bindings\gpio\nxp,imx-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_401b8000_PATH "/soc/gpio@401b8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_401b8000_FULL_NAME "gpio@401b8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_401b8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_401b8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_401b8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_401b8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_401b8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_401b8000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_401b8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_401b8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_401b8000_EXISTS 1
#define DT_N_INST_0_nxp_imx_gpio DT_N_S_soc_S_gpio_401b8000
#define DT_N_NODELABEL_gpio1     DT_N_S_soc_S_gpio_401b8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_401b8000_REG_NUM 1
#define DT_N_S_soc_S_gpio_401b8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_REG_IDX_0_VAL_ADDRESS 1075544064 /* 0x401b8000 */
#define DT_N_S_soc_S_gpio_401b8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_401b8000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_VAL_irq 80
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_VAL_irq 81
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_gpio_401b8000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_COMPAT_MATCHES_nxp_imx_gpio 1
#define DT_N_S_soc_S_gpio_401b8000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_401b8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_401b8000_P_reg {1075544064 /* 0x401b8000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_401b8000_P_reg_IDX_0 1075544064
#define DT_N_S_soc_S_gpio_401b8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_401b8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401b8000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_401b8000, reg, 1)
#define DT_N_S_soc_S_gpio_401b8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401b8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401b8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts {80 /* 0x50 */, 0 /* 0x0 */, 81 /* 0x51 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_0 80
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_2 81
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 3)
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401b8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_label "GPIO_1"
#define DT_N_S_soc_S_gpio_401b8000_P_label_STRING_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_401b8000_P_label_STRING_UPPER_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_401b8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401b8000, label, 0) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 1) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 2) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 3) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 4) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 5)
#define DT_N_S_soc_S_gpio_401b8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401b8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401b8000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401b8000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_401b8000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_ngpios 32
#define DT_N_S_soc_S_gpio_401b8000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_compatible {"nxp,imx-gpio"}
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_IDX_0 "nxp,imx-gpio"
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401b8000, compatible, 0)
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401b8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_401b8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_401b8000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_401b8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@401c0000
 *
 * Node identifier: DT_N_S_soc_S_gpio_401c0000
 *
 * Binding (compatible = nxp,imx-gpio):
 *   $ZEPHYR_BASE\dts\bindings\gpio\nxp,imx-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_401c0000_PATH "/soc/gpio@401c0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_401c0000_FULL_NAME "gpio@401c0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_401c0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_401c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_401c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_401c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_401c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_401c0000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_401c0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_401c0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_401c0000_EXISTS 1
#define DT_N_INST_2_nxp_imx_gpio DT_N_S_soc_S_gpio_401c0000
#define DT_N_NODELABEL_gpio3     DT_N_S_soc_S_gpio_401c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_401c0000_REG_NUM 1
#define DT_N_S_soc_S_gpio_401c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_REG_IDX_0_VAL_ADDRESS 1075576832 /* 0x401c0000 */
#define DT_N_S_soc_S_gpio_401c0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_401c0000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_VAL_irq 84
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_VAL_irq 85
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_gpio_401c0000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_COMPAT_MATCHES_nxp_imx_gpio 1
#define DT_N_S_soc_S_gpio_401c0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_401c0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_401c0000_P_reg {1075576832 /* 0x401c0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_401c0000_P_reg_IDX_0 1075576832
#define DT_N_S_soc_S_gpio_401c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_401c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c0000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_401c0000, reg, 1)
#define DT_N_S_soc_S_gpio_401c0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts {84 /* 0x54 */, 0 /* 0x0 */, 85 /* 0x55 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_0 84
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_2 85
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 3)
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_label "GPIO_3"
#define DT_N_S_soc_S_gpio_401c0000_P_label_STRING_TOKEN GPIO_3
#define DT_N_S_soc_S_gpio_401c0000_P_label_STRING_UPPER_TOKEN GPIO_3
#define DT_N_S_soc_S_gpio_401c0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c0000, label, 0) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 1) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 2) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 3) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 4) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 5)
#define DT_N_S_soc_S_gpio_401c0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c0000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c0000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_401c0000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_ngpios 32
#define DT_N_S_soc_S_gpio_401c0000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_compatible {"nxp,imx-gpio"}
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_IDX_0 "nxp,imx-gpio"
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c0000, compatible, 0)
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_401c0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_401c0000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_401c0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@401c4000
 *
 * Node identifier: DT_N_S_soc_S_gpio_401c4000
 *
 * Binding (compatible = nxp,imx-gpio):
 *   $ZEPHYR_BASE\dts\bindings\gpio\nxp,imx-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_401c4000_PATH "/soc/gpio@401c4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_401c4000_FULL_NAME "gpio@401c4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_401c4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_401c4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_401c4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_401c4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_401c4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_401c4000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_401c4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_401c4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_401c4000_EXISTS 1
#define DT_N_INST_3_nxp_imx_gpio DT_N_S_soc_S_gpio_401c4000
#define DT_N_NODELABEL_gpio4     DT_N_S_soc_S_gpio_401c4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_401c4000_REG_NUM 1
#define DT_N_S_soc_S_gpio_401c4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_REG_IDX_0_VAL_ADDRESS 1075593216 /* 0x401c4000 */
#define DT_N_S_soc_S_gpio_401c4000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpio_401c4000_IRQ_NUM 2
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_VAL_irq 86
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_VAL_irq 87
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_VAL_priority 0
#define DT_N_S_soc_S_gpio_401c4000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_COMPAT_MATCHES_nxp_imx_gpio 1
#define DT_N_S_soc_S_gpio_401c4000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_401c4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_401c4000_P_reg {1075593216 /* 0x401c4000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpio_401c4000_P_reg_IDX_0 1075593216
#define DT_N_S_soc_S_gpio_401c4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpio_401c4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c4000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_401c4000, reg, 1)
#define DT_N_S_soc_S_gpio_401c4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts {86 /* 0x56 */, 0 /* 0x0 */, 87 /* 0x57 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_0 86
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_2 87
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_3 0
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 3)
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_label "GPIO_4"
#define DT_N_S_soc_S_gpio_401c4000_P_label_STRING_TOKEN GPIO_4
#define DT_N_S_soc_S_gpio_401c4000_P_label_STRING_UPPER_TOKEN GPIO_4
#define DT_N_S_soc_S_gpio_401c4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c4000, label, 0) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 1) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 2) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 3) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 4) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 5)
#define DT_N_S_soc_S_gpio_401c4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_401c4000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c4000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_401c4000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_ngpios 32
#define DT_N_S_soc_S_gpio_401c4000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_compatible {"nxp,imx-gpio"}
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_IDX_0 "nxp,imx-gpio"
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_401c4000, compatible, 0)
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_401c4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_401c4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_401c4000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_401c4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpt@401ec000
 *
 * Node identifier: DT_N_S_soc_S_gpt_401ec000
 *
 * Binding (compatible = nxp,imx-gpt):
 *   $ZEPHYR_BASE\dts\bindings\timer\nxp,imx-gpt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpt_401ec000_PATH "/soc/gpt@401ec000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpt_401ec000_FULL_NAME "gpt@401ec000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpt_401ec000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpt_401ec000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpt_401ec000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_401ec000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpt_401ec000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpt_401ec000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpt_401ec000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpt_401ec000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpt_401ec000_EXISTS 1
#define DT_N_INST_0_nxp_imx_gpt DT_N_S_soc_S_gpt_401ec000
#define DT_N_NODELABEL_gpt1     DT_N_S_soc_S_gpt_401ec000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpt_401ec000_REG_NUM 1
#define DT_N_S_soc_S_gpt_401ec000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_REG_IDX_0_VAL_ADDRESS 1075757056 /* 0x401ec000 */
#define DT_N_S_soc_S_gpt_401ec000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpt_401ec000_IRQ_NUM 1
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_VAL_irq 100
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpt_401ec000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_COMPAT_MATCHES_nxp_imx_gpt 1
#define DT_N_S_soc_S_gpt_401ec000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpt_401ec000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpt_401ec000_P_reg {1075757056 /* 0x401ec000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpt_401ec000_P_reg_IDX_0 1075757056
#define DT_N_S_soc_S_gpt_401ec000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpt_401ec000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401ec000, reg, 0) \
	fn(DT_N_S_soc_S_gpt_401ec000, reg, 1)
#define DT_N_S_soc_S_gpt_401ec000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401ec000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401ec000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts {100 /* 0x64 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_IDX_0 100
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401ec000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpt_401ec000, interrupts, 1)
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401ec000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401ec000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_label "GPT1"
#define DT_N_S_soc_S_gpt_401ec000_P_label_STRING_TOKEN GPT1
#define DT_N_S_soc_S_gpt_401ec000_P_label_STRING_UPPER_TOKEN GPT1
#define DT_N_S_soc_S_gpt_401ec000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401ec000, label, 0) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 1) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 2) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 3)
#define DT_N_S_soc_S_gpt_401ec000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401ec000, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401ec000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_gptfreq 25000000
#define DT_N_S_soc_S_gpt_401ec000_P_gptfreq_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_compatible {"nxp,imx-gpt"}
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_IDX_0 "nxp,imx-gpt"
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401ec000, compatible, 0)
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpt_401ec000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_name 11
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_bits 20
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401ec000, clocks, 0)
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_LEN 1
#define DT_N_S_soc_S_gpt_401ec000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_gpt_401ec000_P_wakeup_source 0
#define DT_N_S_soc_S_gpt_401ec000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpt@401f0000
 *
 * Node identifier: DT_N_S_soc_S_gpt_401f0000
 *
 * Binding (compatible = nxp,imx-gpt):
 *   $ZEPHYR_BASE\dts\bindings\timer\nxp,imx-gpt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpt_401f0000_PATH "/soc/gpt@401f0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpt_401f0000_FULL_NAME "gpt@401f0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpt_401f0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpt_401f0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpt_401f0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_401f0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpt_401f0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpt_401f0000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpt_401f0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpt_401f0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpt_401f0000_EXISTS 1
#define DT_N_INST_1_nxp_imx_gpt DT_N_S_soc_S_gpt_401f0000
#define DT_N_NODELABEL_gpt2     DT_N_S_soc_S_gpt_401f0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpt_401f0000_REG_NUM 1
#define DT_N_S_soc_S_gpt_401f0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_REG_IDX_0_VAL_ADDRESS 1075773440 /* 0x401f0000 */
#define DT_N_S_soc_S_gpt_401f0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_gpt_401f0000_IRQ_NUM 1
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_VAL_irq 101
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_gpt_401f0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_COMPAT_MATCHES_nxp_imx_gpt 1
#define DT_N_S_soc_S_gpt_401f0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpt_401f0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpt_401f0000_P_reg {1075773440 /* 0x401f0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_gpt_401f0000_P_reg_IDX_0 1075773440
#define DT_N_S_soc_S_gpt_401f0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_gpt_401f0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401f0000, reg, 0) \
	fn(DT_N_S_soc_S_gpt_401f0000, reg, 1)
#define DT_N_S_soc_S_gpt_401f0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401f0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401f0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401f0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts {101 /* 0x65 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_IDX_0 101
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401f0000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpt_401f0000, interrupts, 1)
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401f0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401f0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401f0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_label "GPT2"
#define DT_N_S_soc_S_gpt_401f0000_P_label_STRING_TOKEN GPT2
#define DT_N_S_soc_S_gpt_401f0000_P_label_STRING_UPPER_TOKEN GPT2
#define DT_N_S_soc_S_gpt_401f0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401f0000, label, 0) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 1) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 2) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 3)
#define DT_N_S_soc_S_gpt_401f0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401f0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_401f0000, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401f0000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_gptfreq 25000000
#define DT_N_S_soc_S_gpt_401f0000_P_gptfreq_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_compatible {"nxp,imx-gpt"}
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_IDX_0 "nxp,imx-gpt"
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401f0000, compatible, 0)
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401f0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpt_401f0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_name 11
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_401f0000, clocks, 0)
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_401f0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_LEN 1
#define DT_N_S_soc_S_gpt_401f0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_gpt_401f0000_P_wakeup_source 0
#define DT_N_S_soc_S_gpt_401f0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@403f0000
 *
 * Node identifier: DT_N_S_soc_S_i2c_403f0000
 *
 * Binding (compatible = nxp,imx-lpi2c):
 *   $ZEPHYR_BASE\dts\bindings\i2c\nxp,imx-lpi2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_403f0000_PATH "/soc/i2c@403f0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_403f0000_FULL_NAME "i2c@403f0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_403f0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_403f0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_403f0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_403f0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_403f0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_403f0000_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_403f0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_403f0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_403f0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_lpi2c DT_N_S_soc_S_i2c_403f0000
#define DT_N_NODELABEL_lpi2c1     DT_N_S_soc_S_i2c_403f0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_403f0000_REG_NUM 1
#define DT_N_S_soc_S_i2c_403f0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_REG_IDX_0_VAL_ADDRESS 1077870592 /* 0x403f0000 */
#define DT_N_S_soc_S_i2c_403f0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_i2c_403f0000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_VAL_irq 28
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_i2c_403f0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_COMPAT_MATCHES_nxp_imx_lpi2c 1
#define DT_N_S_soc_S_i2c_403f0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_403f0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_403f0000_P_reg {1077870592 /* 0x403f0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_i2c_403f0000_P_reg_IDX_0 1077870592
#define DT_N_S_soc_S_i2c_403f0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_i2c_403f0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_403f0000, reg, 1)
#define DT_N_S_soc_S_i2c_403f0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts {28 /* 0x1c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_IDX_0 28
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_403f0000, interrupts, 1)
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_403f0000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_label "I2C_1"
#define DT_N_S_soc_S_i2c_403f0000_P_label_STRING_TOKEN I2C_1
#define DT_N_S_soc_S_i2c_403f0000_P_label_STRING_UPPER_TOKEN I2C_1
#define DT_N_S_soc_S_i2c_403f0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, label, 0) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 1) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 2) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 3) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 4)
#define DT_N_S_soc_S_i2c_403f0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_status "disabled"
#define DT_N_S_soc_S_i2c_403f0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_403f0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, status, 0) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 1) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 2) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 3) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 4) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 5) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 6) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 7)
#define DT_N_S_soc_S_i2c_403f0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_compatible {"nxp,imx-lpi2c"}
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_IDX_0 "nxp,imx-lpi2c"
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, compatible, 0)
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_403f0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_name 4
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_offset 112
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_bits 6
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f0000, clocks, 0)
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_403f0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_403f0000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_403f0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@403f4000
 *
 * Node identifier: DT_N_S_soc_S_i2c_403f4000
 *
 * Binding (compatible = nxp,imx-lpi2c):
 *   $ZEPHYR_BASE\dts\bindings\i2c\nxp,imx-lpi2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_403f4000_PATH "/soc/i2c@403f4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_403f4000_FULL_NAME "i2c@403f4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_403f4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_403f4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_403f4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_403f4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_403f4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_403f4000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_403f4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_403f4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_403f4000_EXISTS 1
#define DT_N_INST_1_nxp_imx_lpi2c DT_N_S_soc_S_i2c_403f4000
#define DT_N_NODELABEL_lpi2c2     DT_N_S_soc_S_i2c_403f4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_403f4000_REG_NUM 1
#define DT_N_S_soc_S_i2c_403f4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_REG_IDX_0_VAL_ADDRESS 1077886976 /* 0x403f4000 */
#define DT_N_S_soc_S_i2c_403f4000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_i2c_403f4000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_i2c_403f4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_COMPAT_MATCHES_nxp_imx_lpi2c 1
#define DT_N_S_soc_S_i2c_403f4000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_403f4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_403f4000_P_reg {1077886976 /* 0x403f4000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_i2c_403f4000_P_reg_IDX_0 1077886976
#define DT_N_S_soc_S_i2c_403f4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_i2c_403f4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_403f4000, reg, 1)
#define DT_N_S_soc_S_i2c_403f4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts {29 /* 0x1d */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_IDX_0 29
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_403f4000, interrupts, 1)
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_403f4000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_label "I2C_2"
#define DT_N_S_soc_S_i2c_403f4000_P_label_STRING_TOKEN I2C_2
#define DT_N_S_soc_S_i2c_403f4000_P_label_STRING_UPPER_TOKEN I2C_2
#define DT_N_S_soc_S_i2c_403f4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, label, 0) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 1) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 2) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 3) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 4)
#define DT_N_S_soc_S_i2c_403f4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_status "disabled"
#define DT_N_S_soc_S_i2c_403f4000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f4000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f4000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_403f4000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f4000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f4000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, status, 0) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 1) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 2) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 3) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 4) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 5) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 6) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 7)
#define DT_N_S_soc_S_i2c_403f4000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f4000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_compatible {"nxp,imx-lpi2c"}
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_IDX_0 "nxp,imx-lpi2c"
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, compatible, 0)
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_403f4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_name 4
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_offset 112
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_bits 8
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f4000, clocks, 0)
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f4000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_403f4000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_403f4000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_403f4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@403f8000
 *
 * Node identifier: DT_N_S_soc_S_i2c_403f8000
 *
 * Binding (compatible = nxp,imx-lpi2c):
 *   $ZEPHYR_BASE\dts\bindings\i2c\nxp,imx-lpi2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_403f8000_PATH "/soc/i2c@403f8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_403f8000_FULL_NAME "i2c@403f8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_403f8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_403f8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_403f8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_403f8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_403f8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_403f8000_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_403f8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_403f8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_403f8000_EXISTS 1
#define DT_N_INST_2_nxp_imx_lpi2c DT_N_S_soc_S_i2c_403f8000
#define DT_N_NODELABEL_lpi2c3     DT_N_S_soc_S_i2c_403f8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_403f8000_REG_NUM 1
#define DT_N_S_soc_S_i2c_403f8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_REG_IDX_0_VAL_ADDRESS 1077903360 /* 0x403f8000 */
#define DT_N_S_soc_S_i2c_403f8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_i2c_403f8000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_VAL_irq 30
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_i2c_403f8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_COMPAT_MATCHES_nxp_imx_lpi2c 1
#define DT_N_S_soc_S_i2c_403f8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_403f8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_403f8000_P_reg {1077903360 /* 0x403f8000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_i2c_403f8000_P_reg_IDX_0 1077903360
#define DT_N_S_soc_S_i2c_403f8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_i2c_403f8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_403f8000, reg, 1)
#define DT_N_S_soc_S_i2c_403f8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts {30 /* 0x1e */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_IDX_0 30
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_403f8000, interrupts, 1)
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_403f8000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_label "I2C_3"
#define DT_N_S_soc_S_i2c_403f8000_P_label_STRING_TOKEN I2C_3
#define DT_N_S_soc_S_i2c_403f8000_P_label_STRING_UPPER_TOKEN I2C_3
#define DT_N_S_soc_S_i2c_403f8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, label, 0) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 1) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 2) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 3) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 4)
#define DT_N_S_soc_S_i2c_403f8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_status "disabled"
#define DT_N_S_soc_S_i2c_403f8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_403f8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_403f8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403f8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, status, 0) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 1) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 2) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 3) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 4) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 5) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 6) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 7)
#define DT_N_S_soc_S_i2c_403f8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403f8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_compatible {"nxp,imx-lpi2c"}
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_IDX_0 "nxp,imx-lpi2c"
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, compatible, 0)
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_403f8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_name 4
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_offset 112
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_bits 10
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403f8000, clocks, 0)
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403f8000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_403f8000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_403f8000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_403f8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@403fc000
 *
 * Node identifier: DT_N_S_soc_S_i2c_403fc000
 *
 * Binding (compatible = nxp,imx-lpi2c):
 *   $ZEPHYR_BASE\dts\bindings\i2c\nxp,imx-lpi2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_403fc000_PATH "/soc/i2c@403fc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_403fc000_FULL_NAME "i2c@403fc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_403fc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_i2c_403fc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_403fc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_403fc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_403fc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_403fc000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_403fc000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_403fc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_403fc000_EXISTS 1
#define DT_N_INST_3_nxp_imx_lpi2c DT_N_S_soc_S_i2c_403fc000
#define DT_N_NODELABEL_lpi2c4     DT_N_S_soc_S_i2c_403fc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_403fc000_REG_NUM 1
#define DT_N_S_soc_S_i2c_403fc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_REG_IDX_0_VAL_ADDRESS 1077919744 /* 0x403fc000 */
#define DT_N_S_soc_S_i2c_403fc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_i2c_403fc000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_VAL_irq 31
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_i2c_403fc000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_COMPAT_MATCHES_nxp_imx_lpi2c 1
#define DT_N_S_soc_S_i2c_403fc000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_403fc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_403fc000_P_reg {1077919744 /* 0x403fc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_i2c_403fc000_P_reg_IDX_0 1077919744
#define DT_N_S_soc_S_i2c_403fc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_i2c_403fc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_403fc000, reg, 1)
#define DT_N_S_soc_S_i2c_403fc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts {31 /* 0x1f */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_IDX_0 31
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2c_403fc000, interrupts, 1)
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_403fc000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_label "I2C_4"
#define DT_N_S_soc_S_i2c_403fc000_P_label_STRING_TOKEN I2C_4
#define DT_N_S_soc_S_i2c_403fc000_P_label_STRING_UPPER_TOKEN I2C_4
#define DT_N_S_soc_S_i2c_403fc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, label, 0) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 1) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 2) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 3) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 4)
#define DT_N_S_soc_S_i2c_403fc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_label_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_status "disabled"
#define DT_N_S_soc_S_i2c_403fc000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_403fc000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403fc000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_403fc000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_403fc000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_403fc000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, status, 0) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 1) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 2) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 3) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 4) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 5) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 6) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 7)
#define DT_N_S_soc_S_i2c_403fc000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_403fc000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_compatible {"nxp,imx-lpi2c"}
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_IDX_0 "nxp,imx-lpi2c"
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, compatible, 0)
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_403fc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_name 4
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_offset 128
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_403fc000, clocks, 0)
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_403fc000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_403fc000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_403fc000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_403fc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@401f8000
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_401f8000
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_401f8000_PATH "/soc/iomuxc@401f8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_401f8000_FULL_NAME "iomuxc@401f8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_iomuxc_401f8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_iomuxc_401f8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_401f8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_401f8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_401f8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_401f8000_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_401f8000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_401f8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_401f8000_EXISTS 1
#define DT_N_NODELABEL_iomuxc DT_N_S_soc_S_iomuxc_401f8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_401f8000_REG_NUM 1
#define DT_N_S_soc_S_iomuxc_401f8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_401f8000_REG_IDX_0_VAL_ADDRESS 1075806208 /* 0x401f8000 */
#define DT_N_S_soc_S_iomuxc_401f8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_iomuxc_401f8000_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_401f8000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_401f8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg {1075806208 /* 0x401f8000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_IDX_0 1075806208
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_401f8000, reg, 0) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, reg, 1)
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_401f8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_401f8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_iomuxc_401f8000_P_label "PINMUX_0"
#define DT_N_S_soc_S_iomuxc_401f8000_P_label_STRING_TOKEN PINMUX_0
#define DT_N_S_soc_S_iomuxc_401f8000_P_label_STRING_UPPER_TOKEN PINMUX_0
#define DT_N_S_soc_S_iomuxc_401f8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_401f8000, label, 0) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 1) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 2) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 3) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 4) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 5) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 6) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 7)
#define DT_N_S_soc_S_iomuxc_401f8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_401f8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_401f8000, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_401f8000_P_label_EXISTS 1

/*
 * Devicetree node: /soc/random@400cc000
 *
 * Node identifier: DT_N_S_soc_S_random_400cc000
 *
 * Binding (compatible = nxp,kinetis-trng):
 *   $ZEPHYR_BASE\dts\bindings\rng\nxp,kinetis-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_random_400cc000_PATH "/soc/random@400cc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_random_400cc000_FULL_NAME "random@400cc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_random_400cc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_random_400cc000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_random_400cc000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_random_400cc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_random_400cc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_random_400cc000_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_random_400cc000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_random_400cc000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_random_400cc000_EXISTS 1
#define DT_N_INST_0_nxp_kinetis_trng DT_N_S_soc_S_random_400cc000
#define DT_N_NODELABEL_trng          DT_N_S_soc_S_random_400cc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_random_400cc000_REG_NUM 1
#define DT_N_S_soc_S_random_400cc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_REG_IDX_0_VAL_ADDRESS 1074577408 /* 0x400cc000 */
#define DT_N_S_soc_S_random_400cc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_random_400cc000_IRQ_NUM 1
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_VAL_irq 53
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_random_400cc000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_COMPAT_MATCHES_nxp_kinetis_trng 1
#define DT_N_S_soc_S_random_400cc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_random_400cc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_random_400cc000_P_reg {1074577408 /* 0x400cc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_random_400cc000_P_reg_IDX_0 1074577408
#define DT_N_S_soc_S_random_400cc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_random_400cc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_random_400cc000, reg, 0) \
	fn(DT_N_S_soc_S_random_400cc000, reg, 1)
#define DT_N_S_soc_S_random_400cc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_random_400cc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_random_400cc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_interrupts {53 /* 0x35 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_random_400cc000_P_interrupts_IDX_0 53
#define DT_N_S_soc_S_random_400cc000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_random_400cc000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_random_400cc000, interrupts, 0) \
	fn(DT_N_S_soc_S_random_400cc000, interrupts, 1)
#define DT_N_S_soc_S_random_400cc000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_random_400cc000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_random_400cc000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_label "TRNG"
#define DT_N_S_soc_S_random_400cc000_P_label_STRING_TOKEN TRNG
#define DT_N_S_soc_S_random_400cc000_P_label_STRING_UPPER_TOKEN TRNG
#define DT_N_S_soc_S_random_400cc000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_random_400cc000, label, 0) \
	fn(DT_N_S_soc_S_random_400cc000, label, 1) \
	fn(DT_N_S_soc_S_random_400cc000, label, 2) \
	fn(DT_N_S_soc_S_random_400cc000, label, 3)
#define DT_N_S_soc_S_random_400cc000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_random_400cc000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_random_400cc000_P_label_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_status "okay"
#define DT_N_S_soc_S_random_400cc000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_random_400cc000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_random_400cc000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_random_400cc000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_random_400cc000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_random_400cc000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_random_400cc000, status, 0) \
	fn(DT_N_S_soc_S_random_400cc000, status, 1) \
	fn(DT_N_S_soc_S_random_400cc000, status, 2) \
	fn(DT_N_S_soc_S_random_400cc000, status, 3)
#define DT_N_S_soc_S_random_400cc000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_random_400cc000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_random_400cc000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_random_400cc000_P_status_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_compatible {"nxp,kinetis-trng"}
#define DT_N_S_soc_S_random_400cc000_P_compatible_IDX_0 "nxp,kinetis-trng"
#define DT_N_S_soc_S_random_400cc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_random_400cc000, compatible, 0)
#define DT_N_S_soc_S_random_400cc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_random_400cc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_random_400cc000_P_compatible_LEN 1
#define DT_N_S_soc_S_random_400cc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_random_400cc000_P_wakeup_source 0
#define DT_N_S_soc_S_random_400cc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/semc0@402f0000
 *
 * Node identifier: DT_N_S_soc_S_semc0_402f0000
 *
 * Binding (compatible = nxp,imx-semc):
 *   $ZEPHYR_BASE\dts\bindings\memory-controllers\nxp,imx-semc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_semc0_402f0000_PATH "/soc/semc0@402f0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_semc0_402f0000_FULL_NAME "semc0@402f0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_semc0_402f0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_semc0_402f0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_semc0_402f0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_semc0_402f0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_semc0_402f0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_semc0_402f0000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_semc0_402f0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_semc0_402f0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_semc0_402f0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_semc DT_N_S_soc_S_semc0_402f0000
#define DT_N_NODELABEL_semc      DT_N_S_soc_S_semc0_402f0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_semc0_402f0000_REG_NUM 1
#define DT_N_S_soc_S_semc0_402f0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_REG_IDX_0_VAL_ADDRESS 1076822016 /* 0x402f0000 */
#define DT_N_S_soc_S_semc0_402f0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_semc0_402f0000_IRQ_NUM 1
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_VAL_irq 109
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_semc0_402f0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_COMPAT_MATCHES_nxp_imx_semc 1
#define DT_N_S_soc_S_semc0_402f0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_semc0_402f0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_semc0_402f0000_P_reg {1076822016 /* 0x402f0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_semc0_402f0000_P_reg_IDX_0 1076822016
#define DT_N_S_soc_S_semc0_402f0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_semc0_402f0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semc0_402f0000, reg, 0) \
	fn(DT_N_S_soc_S_semc0_402f0000, reg, 1)
#define DT_N_S_soc_S_semc0_402f0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semc0_402f0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_semc0_402f0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts {109 /* 0x6d */, 0 /* 0x0 */}
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_IDX_0 109
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semc0_402f0000, interrupts, 0) \
	fn(DT_N_S_soc_S_semc0_402f0000, interrupts, 1)
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semc0_402f0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_semc0_402f0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_label "SEMC0"
#define DT_N_S_soc_S_semc0_402f0000_P_label_STRING_TOKEN SEMC0
#define DT_N_S_soc_S_semc0_402f0000_P_label_STRING_UPPER_TOKEN SEMC0
#define DT_N_S_soc_S_semc0_402f0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semc0_402f0000, label, 0) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 1) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 2) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 3) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 4)
#define DT_N_S_soc_S_semc0_402f0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semc0_402f0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_semc0_402f0000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_semc0_402f0000_P_label_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_compatible {"nxp,imx-semc"}
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_IDX_0 "nxp,imx-semc"
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_semc0_402f0000, compatible, 0)
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_semc0_402f0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_LEN 1
#define DT_N_S_soc_S_semc0_402f0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_semc0_402f0000_P_wakeup_source 0
#define DT_N_S_soc_S_semc0_402f0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@402a4000
 *
 * Node identifier: DT_N_S_soc_S_spi_402a4000
 *
 * Binding (compatible = nxp,imx-flexspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-flexspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_402a4000_PATH "/soc/spi@402a4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_402a4000_FULL_NAME "spi@402a4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_402a4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_402a4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_402a4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_402a4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_402a4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_402a4000_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_402a4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_402a4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_402a4000_EXISTS 1
#define DT_N_INST_1_nxp_imx_flexspi DT_N_S_soc_S_spi_402a4000
#define DT_N_NODELABEL_flexspi2     DT_N_S_soc_S_spi_402a4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_402a4000_REG_NUM 1
#define DT_N_S_soc_S_spi_402a4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_REG_IDX_0_VAL_ADDRESS 1076510720 /* 0x402a4000 */
#define DT_N_S_soc_S_spi_402a4000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_402a4000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_VAL_irq 107
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_spi_402a4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_COMPAT_MATCHES_nxp_imx_flexspi 1
#define DT_N_S_soc_S_spi_402a4000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_402a4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_402a4000_P_reg {1076510720 /* 0x402a4000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_spi_402a4000_P_reg_IDX_0 1076510720
#define DT_N_S_soc_S_spi_402a4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_402a4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a4000, reg, 0) \
	fn(DT_N_S_soc_S_spi_402a4000, reg, 1)
#define DT_N_S_soc_S_spi_402a4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_interrupts {107 /* 0x6b */, 0 /* 0x0 */}
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_IDX_0 107
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a4000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_402a4000, interrupts, 1)
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_bufferable 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_bufferable_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_cacheable 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_cacheable_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_prefetch 0
#define DT_N_S_soc_S_spi_402a4000_P_ahb_prefetch_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_ahb_read_addr_opt 0
#define DT_N_S_soc_S_spi_402a4000_P_ahb_read_addr_opt_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_combination_mode 0
#define DT_N_S_soc_S_spi_402a4000_P_combination_mode_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_sck_differential_clock 0
#define DT_N_S_soc_S_spi_402a4000_P_sck_differential_clock_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_rx_clock_source 0
#define DT_N_S_soc_S_spi_402a4000_P_rx_clock_source_ENUM_IDX 0
#define DT_N_S_soc_S_spi_402a4000_P_rx_clock_source_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_label "FLEXSPI1"
#define DT_N_S_soc_S_spi_402a4000_P_label_STRING_TOKEN FLEXSPI1
#define DT_N_S_soc_S_spi_402a4000_P_label_STRING_UPPER_TOKEN FLEXSPI1
#define DT_N_S_soc_S_spi_402a4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a4000, label, 0) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 1) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 2) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 3) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 4) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 5) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 6) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 7)
#define DT_N_S_soc_S_spi_402a4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, label, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a4000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_status "disabled"
#define DT_N_S_soc_S_spi_402a4000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_402a4000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_402a4000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_402a4000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_402a4000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_402a4000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a4000, status, 0) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 1) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 2) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 3) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 4) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 5) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 6) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 7)
#define DT_N_S_soc_S_spi_402a4000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a4000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a4000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a4000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_compatible {"nxp,imx-flexspi"}
#define DT_N_S_soc_S_spi_402a4000_P_compatible_IDX_0 "nxp,imx-flexspi"
#define DT_N_S_soc_S_spi_402a4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a4000, compatible, 0)
#define DT_N_S_soc_S_spi_402a4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a4000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_402a4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_402a4000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_402a4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@40394000
 *
 * Node identifier: DT_N_S_soc_S_spi_40394000
 *
 * Binding (compatible = nxp,imx-lpspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-lpspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_40394000_PATH "/soc/spi@40394000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_40394000_FULL_NAME "spi@40394000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_40394000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_40394000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_40394000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40394000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_40394000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_40394000_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_40394000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_40394000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_40394000_EXISTS 1
#define DT_N_INST_0_nxp_imx_lpspi DT_N_S_soc_S_spi_40394000
#define DT_N_NODELABEL_lpspi1     DT_N_S_soc_S_spi_40394000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_40394000_REG_NUM 1
#define DT_N_S_soc_S_spi_40394000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_REG_IDX_0_VAL_ADDRESS 1077493760 /* 0x40394000 */
#define DT_N_S_soc_S_spi_40394000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_40394000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_VAL_irq 32
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_40394000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_COMPAT_MATCHES_nxp_imx_lpspi 1
#define DT_N_S_soc_S_spi_40394000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_40394000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_40394000_P_reg {1077493760 /* 0x40394000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_spi_40394000_P_reg_IDX_0 1077493760
#define DT_N_S_soc_S_spi_40394000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_40394000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, reg, 0) \
	fn(DT_N_S_soc_S_spi_40394000, reg, 1)
#define DT_N_S_soc_S_spi_40394000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_interrupts {32 /* 0x20 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_40394000_P_interrupts_IDX_0 32
#define DT_N_S_soc_S_spi_40394000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_40394000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_40394000, interrupts, 1)
#define DT_N_S_soc_S_spi_40394000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_name 5
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_bits 0
#define DT_N_S_soc_S_spi_40394000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, clocks, 0)
#define DT_N_S_soc_S_spi_40394000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_40394000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_label "SPI_1"
#define DT_N_S_soc_S_spi_40394000_P_label_STRING_TOKEN SPI_1
#define DT_N_S_soc_S_spi_40394000_P_label_STRING_UPPER_TOKEN SPI_1
#define DT_N_S_soc_S_spi_40394000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, label, 0) \
	fn(DT_N_S_soc_S_spi_40394000, label, 1) \
	fn(DT_N_S_soc_S_spi_40394000, label, 2) \
	fn(DT_N_S_soc_S_spi_40394000, label, 3) \
	fn(DT_N_S_soc_S_spi_40394000, label, 4)
#define DT_N_S_soc_S_spi_40394000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_status "disabled"
#define DT_N_S_soc_S_spi_40394000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_40394000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40394000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_40394000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_40394000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40394000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, status, 0) \
	fn(DT_N_S_soc_S_spi_40394000, status, 1) \
	fn(DT_N_S_soc_S_spi_40394000, status, 2) \
	fn(DT_N_S_soc_S_spi_40394000, status, 3) \
	fn(DT_N_S_soc_S_spi_40394000, status, 4) \
	fn(DT_N_S_soc_S_spi_40394000, status, 5) \
	fn(DT_N_S_soc_S_spi_40394000, status, 6) \
	fn(DT_N_S_soc_S_spi_40394000, status, 7)
#define DT_N_S_soc_S_spi_40394000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40394000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_compatible {"nxp,imx-lpspi"}
#define DT_N_S_soc_S_spi_40394000_P_compatible_IDX_0 "nxp,imx-lpspi"
#define DT_N_S_soc_S_spi_40394000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40394000, compatible, 0)
#define DT_N_S_soc_S_spi_40394000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40394000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40394000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_40394000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_40394000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_40394000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@40398000
 *
 * Node identifier: DT_N_S_soc_S_spi_40398000
 *
 * Binding (compatible = nxp,imx-lpspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-lpspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_40398000_PATH "/soc/spi@40398000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_40398000_FULL_NAME "spi@40398000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_40398000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_40398000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_40398000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_40398000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_40398000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_40398000_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_40398000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_40398000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_40398000_EXISTS 1
#define DT_N_INST_1_nxp_imx_lpspi DT_N_S_soc_S_spi_40398000
#define DT_N_NODELABEL_lpspi2     DT_N_S_soc_S_spi_40398000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_40398000_REG_NUM 1
#define DT_N_S_soc_S_spi_40398000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_REG_IDX_0_VAL_ADDRESS 1077510144 /* 0x40398000 */
#define DT_N_S_soc_S_spi_40398000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_40398000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_VAL_irq 33
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_40398000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_COMPAT_MATCHES_nxp_imx_lpspi 1
#define DT_N_S_soc_S_spi_40398000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_40398000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_40398000_P_reg {1077510144 /* 0x40398000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_spi_40398000_P_reg_IDX_0 1077510144
#define DT_N_S_soc_S_spi_40398000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_40398000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, reg, 0) \
	fn(DT_N_S_soc_S_spi_40398000, reg, 1)
#define DT_N_S_soc_S_spi_40398000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_interrupts {33 /* 0x21 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_40398000_P_interrupts_IDX_0 33
#define DT_N_S_soc_S_spi_40398000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_40398000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_40398000, interrupts, 1)
#define DT_N_S_soc_S_spi_40398000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_name 5
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_bits 2
#define DT_N_S_soc_S_spi_40398000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, clocks, 0)
#define DT_N_S_soc_S_spi_40398000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_40398000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_label "SPI_2"
#define DT_N_S_soc_S_spi_40398000_P_label_STRING_TOKEN SPI_2
#define DT_N_S_soc_S_spi_40398000_P_label_STRING_UPPER_TOKEN SPI_2
#define DT_N_S_soc_S_spi_40398000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, label, 0) \
	fn(DT_N_S_soc_S_spi_40398000, label, 1) \
	fn(DT_N_S_soc_S_spi_40398000, label, 2) \
	fn(DT_N_S_soc_S_spi_40398000, label, 3) \
	fn(DT_N_S_soc_S_spi_40398000, label, 4)
#define DT_N_S_soc_S_spi_40398000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_status "disabled"
#define DT_N_S_soc_S_spi_40398000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_40398000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40398000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_40398000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_40398000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_40398000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, status, 0) \
	fn(DT_N_S_soc_S_spi_40398000, status, 1) \
	fn(DT_N_S_soc_S_spi_40398000, status, 2) \
	fn(DT_N_S_soc_S_spi_40398000, status, 3) \
	fn(DT_N_S_soc_S_spi_40398000, status, 4) \
	fn(DT_N_S_soc_S_spi_40398000, status, 5) \
	fn(DT_N_S_soc_S_spi_40398000, status, 6) \
	fn(DT_N_S_soc_S_spi_40398000, status, 7)
#define DT_N_S_soc_S_spi_40398000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_40398000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_compatible {"nxp,imx-lpspi"}
#define DT_N_S_soc_S_spi_40398000_P_compatible_IDX_0 "nxp,imx-lpspi"
#define DT_N_S_soc_S_spi_40398000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_40398000, compatible, 0)
#define DT_N_S_soc_S_spi_40398000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_40398000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_40398000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_40398000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_40398000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_40398000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@4039c000
 *
 * Node identifier: DT_N_S_soc_S_spi_4039c000
 *
 * Binding (compatible = nxp,imx-lpspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-lpspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_4039c000_PATH "/soc/spi@4039c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_4039c000_FULL_NAME "spi@4039c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_4039c000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_4039c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_4039c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_4039c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_4039c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_4039c000_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_4039c000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_4039c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_4039c000_EXISTS 1
#define DT_N_INST_2_nxp_imx_lpspi DT_N_S_soc_S_spi_4039c000
#define DT_N_NODELABEL_lpspi3     DT_N_S_soc_S_spi_4039c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_4039c000_REG_NUM 1
#define DT_N_S_soc_S_spi_4039c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_REG_IDX_0_VAL_ADDRESS 1077526528 /* 0x4039c000 */
#define DT_N_S_soc_S_spi_4039c000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_4039c000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_VAL_irq 34
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_4039c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_COMPAT_MATCHES_nxp_imx_lpspi 1
#define DT_N_S_soc_S_spi_4039c000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_4039c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_4039c000_P_reg {1077526528 /* 0x4039c000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_spi_4039c000_P_reg_IDX_0 1077526528
#define DT_N_S_soc_S_spi_4039c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_4039c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, reg, 0) \
	fn(DT_N_S_soc_S_spi_4039c000, reg, 1)
#define DT_N_S_soc_S_spi_4039c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_interrupts {34 /* 0x22 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_IDX_0 34
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_4039c000, interrupts, 1)
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_name 5
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_bits 4
#define DT_N_S_soc_S_spi_4039c000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, clocks, 0)
#define DT_N_S_soc_S_spi_4039c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_4039c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_label "SPI_3"
#define DT_N_S_soc_S_spi_4039c000_P_label_STRING_TOKEN SPI_3
#define DT_N_S_soc_S_spi_4039c000_P_label_STRING_UPPER_TOKEN SPI_3
#define DT_N_S_soc_S_spi_4039c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, label, 0) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 1) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 2) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 3) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 4)
#define DT_N_S_soc_S_spi_4039c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_status "disabled"
#define DT_N_S_soc_S_spi_4039c000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_4039c000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_4039c000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_4039c000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_4039c000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_4039c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, status, 0) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 1) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 2) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 3) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 4) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 5) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 6) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 7)
#define DT_N_S_soc_S_spi_4039c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_4039c000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_compatible {"nxp,imx-lpspi"}
#define DT_N_S_soc_S_spi_4039c000_P_compatible_IDX_0 "nxp,imx-lpspi"
#define DT_N_S_soc_S_spi_4039c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_4039c000, compatible, 0)
#define DT_N_S_soc_S_spi_4039c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_4039c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_4039c000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_4039c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_4039c000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_4039c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@403a0000
 *
 * Node identifier: DT_N_S_soc_S_spi_403a0000
 *
 * Binding (compatible = nxp,imx-lpspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-lpspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_403a0000_PATH "/soc/spi@403a0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_403a0000_FULL_NAME "spi@403a0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_403a0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_403a0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_403a0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_403a0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_403a0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_403a0000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_403a0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_403a0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_403a0000_EXISTS 1
#define DT_N_INST_3_nxp_imx_lpspi DT_N_S_soc_S_spi_403a0000
#define DT_N_NODELABEL_lpspi4     DT_N_S_soc_S_spi_403a0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_403a0000_REG_NUM 1
#define DT_N_S_soc_S_spi_403a0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_REG_IDX_0_VAL_ADDRESS 1077542912 /* 0x403a0000 */
#define DT_N_S_soc_S_spi_403a0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_403a0000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_VAL_irq 35
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_403a0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_COMPAT_MATCHES_nxp_imx_lpspi 1
#define DT_N_S_soc_S_spi_403a0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_403a0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_403a0000_P_reg {1077542912 /* 0x403a0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_spi_403a0000_P_reg_IDX_0 1077542912
#define DT_N_S_soc_S_spi_403a0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_403a0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, reg, 0) \
	fn(DT_N_S_soc_S_spi_403a0000, reg, 1)
#define DT_N_S_soc_S_spi_403a0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_interrupts {35 /* 0x23 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_IDX_0 35
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_403a0000, interrupts, 1)
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_name 5
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_bits 6
#define DT_N_S_soc_S_spi_403a0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, clocks, 0)
#define DT_N_S_soc_S_spi_403a0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_403a0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_label "SPI_4"
#define DT_N_S_soc_S_spi_403a0000_P_label_STRING_TOKEN SPI_4
#define DT_N_S_soc_S_spi_403a0000_P_label_STRING_UPPER_TOKEN SPI_4
#define DT_N_S_soc_S_spi_403a0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, label, 0) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 1) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 2) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 3) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 4)
#define DT_N_S_soc_S_spi_403a0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_status "disabled"
#define DT_N_S_soc_S_spi_403a0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_403a0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_403a0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_403a0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_403a0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_403a0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, status, 0) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 1) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 2) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 3) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 4) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 5) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 6) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 7)
#define DT_N_S_soc_S_spi_403a0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_403a0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_compatible {"nxp,imx-lpspi"}
#define DT_N_S_soc_S_spi_403a0000_P_compatible_IDX_0 "nxp,imx-lpspi"
#define DT_N_S_soc_S_spi_403a0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_403a0000, compatible, 0)
#define DT_N_S_soc_S_spi_403a0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_403a0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_403a0000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_403a0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_403a0000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_403a0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv7m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick 1
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv7m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, reg, 0) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/uart@40184000
 *
 * Node identifier: DT_N_S_soc_S_uart_40184000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40184000_PATH "/soc/uart@40184000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40184000_FULL_NAME "uart@40184000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40184000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_40184000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40184000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40184000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40184000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40184000_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40184000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40184000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40184000_EXISTS 1
#define DT_N_INST_1_nxp_kinetis_lpuart DT_N_S_soc_S_uart_40184000
#define DT_N_NODELABEL_lpuart1         DT_N_S_soc_S_uart_40184000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40184000_REG_NUM 1
#define DT_N_S_soc_S_uart_40184000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_REG_IDX_0_VAL_ADDRESS 1075331072 /* 0x40184000 */
#define DT_N_S_soc_S_uart_40184000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_40184000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_40184000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_40184000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40184000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40184000_P_reg {1075331072 /* 0x40184000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_40184000_P_reg_IDX_0 1075331072
#define DT_N_S_soc_S_uart_40184000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_40184000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40184000, reg, 1)
#define DT_N_S_soc_S_uart_40184000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_interrupts {20 /* 0x14 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_40184000_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_uart_40184000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_40184000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40184000, interrupts, 1)
#define DT_N_S_soc_S_uart_40184000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_label "UART_1"
#define DT_N_S_soc_S_uart_40184000_P_label_STRING_TOKEN UART_1
#define DT_N_S_soc_S_uart_40184000_P_label_STRING_UPPER_TOKEN UART_1
#define DT_N_S_soc_S_uart_40184000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, label, 0) \
	fn(DT_N_S_soc_S_uart_40184000, label, 1) \
	fn(DT_N_S_soc_S_uart_40184000, label, 2) \
	fn(DT_N_S_soc_S_uart_40184000, label, 3) \
	fn(DT_N_S_soc_S_uart_40184000, label, 4) \
	fn(DT_N_S_soc_S_uart_40184000, label, 5)
#define DT_N_S_soc_S_uart_40184000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40184000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_status "disabled"
#define DT_N_S_soc_S_uart_40184000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_40184000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40184000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_40184000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_40184000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40184000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, status, 0) \
	fn(DT_N_S_soc_S_uart_40184000, status, 1) \
	fn(DT_N_S_soc_S_uart_40184000, status, 2) \
	fn(DT_N_S_soc_S_uart_40184000, status, 3) \
	fn(DT_N_S_soc_S_uart_40184000, status, 4) \
	fn(DT_N_S_soc_S_uart_40184000, status, 5) \
	fn(DT_N_S_soc_S_uart_40184000, status, 6) \
	fn(DT_N_S_soc_S_uart_40184000, status, 7)
#define DT_N_S_soc_S_uart_40184000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40184000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_40184000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_40184000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, compatible, 0)
#define DT_N_S_soc_S_uart_40184000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40184000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_offset 124
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_uart_40184000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40184000, clocks, 0)
#define DT_N_S_soc_S_uart_40184000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40184000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40184000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40184000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40184000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40184000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@40188000
 *
 * Node identifier: DT_N_S_soc_S_uart_40188000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40188000_PATH "/soc/uart@40188000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40188000_FULL_NAME "uart@40188000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40188000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_40188000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40188000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40188000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40188000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40188000_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40188000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40188000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40188000_EXISTS 1
#define DT_N_INST_2_nxp_kinetis_lpuart DT_N_S_soc_S_uart_40188000
#define DT_N_NODELABEL_lpuart2         DT_N_S_soc_S_uart_40188000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40188000_REG_NUM 1
#define DT_N_S_soc_S_uart_40188000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_REG_IDX_0_VAL_ADDRESS 1075347456 /* 0x40188000 */
#define DT_N_S_soc_S_uart_40188000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_40188000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_VAL_irq 21
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_40188000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_40188000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40188000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40188000_P_reg {1075347456 /* 0x40188000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_40188000_P_reg_IDX_0 1075347456
#define DT_N_S_soc_S_uart_40188000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_40188000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40188000, reg, 1)
#define DT_N_S_soc_S_uart_40188000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_interrupts {21 /* 0x15 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_40188000_P_interrupts_IDX_0 21
#define DT_N_S_soc_S_uart_40188000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_40188000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40188000, interrupts, 1)
#define DT_N_S_soc_S_uart_40188000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_label "UART_2"
#define DT_N_S_soc_S_uart_40188000_P_label_STRING_TOKEN UART_2
#define DT_N_S_soc_S_uart_40188000_P_label_STRING_UPPER_TOKEN UART_2
#define DT_N_S_soc_S_uart_40188000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, label, 0) \
	fn(DT_N_S_soc_S_uart_40188000, label, 1) \
	fn(DT_N_S_soc_S_uart_40188000, label, 2) \
	fn(DT_N_S_soc_S_uart_40188000, label, 3) \
	fn(DT_N_S_soc_S_uart_40188000, label, 4) \
	fn(DT_N_S_soc_S_uart_40188000, label, 5)
#define DT_N_S_soc_S_uart_40188000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40188000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_status "disabled"
#define DT_N_S_soc_S_uart_40188000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_40188000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40188000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_40188000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_40188000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40188000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, status, 0) \
	fn(DT_N_S_soc_S_uart_40188000, status, 1) \
	fn(DT_N_S_soc_S_uart_40188000, status, 2) \
	fn(DT_N_S_soc_S_uart_40188000, status, 3) \
	fn(DT_N_S_soc_S_uart_40188000, status, 4) \
	fn(DT_N_S_soc_S_uart_40188000, status, 5) \
	fn(DT_N_S_soc_S_uart_40188000, status, 6) \
	fn(DT_N_S_soc_S_uart_40188000, status, 7)
#define DT_N_S_soc_S_uart_40188000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40188000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_40188000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_40188000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, compatible, 0)
#define DT_N_S_soc_S_uart_40188000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40188000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_bits 28
#define DT_N_S_soc_S_uart_40188000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40188000, clocks, 0)
#define DT_N_S_soc_S_uart_40188000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40188000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40188000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40188000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40188000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40188000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@4018c000
 *
 * Node identifier: DT_N_S_soc_S_uart_4018c000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4018c000_PATH "/soc/uart@4018c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4018c000_FULL_NAME "uart@4018c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4018c000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_4018c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4018c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4018c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4018c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4018c000_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4018c000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4018c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4018c000_EXISTS 1
#define DT_N_INST_3_nxp_kinetis_lpuart DT_N_S_soc_S_uart_4018c000
#define DT_N_NODELABEL_lpuart3         DT_N_S_soc_S_uart_4018c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4018c000_REG_NUM 1
#define DT_N_S_soc_S_uart_4018c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_REG_IDX_0_VAL_ADDRESS 1075363840 /* 0x4018c000 */
#define DT_N_S_soc_S_uart_4018c000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_4018c000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_4018c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_4018c000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4018c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4018c000_P_reg {1075363840 /* 0x4018c000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_4018c000_P_reg_IDX_0 1075363840
#define DT_N_S_soc_S_uart_4018c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_4018c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, reg, 0) \
	fn(DT_N_S_soc_S_uart_4018c000, reg, 1)
#define DT_N_S_soc_S_uart_4018c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_interrupts {22 /* 0x16 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_4018c000, interrupts, 1)
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_label "UART_3"
#define DT_N_S_soc_S_uart_4018c000_P_label_STRING_TOKEN UART_3
#define DT_N_S_soc_S_uart_4018c000_P_label_STRING_UPPER_TOKEN UART_3
#define DT_N_S_soc_S_uart_4018c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, label, 0) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 1) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 2) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 3) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 4) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 5)
#define DT_N_S_soc_S_uart_4018c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4018c000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_status "disabled"
#define DT_N_S_soc_S_uart_4018c000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_4018c000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_4018c000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_4018c000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_4018c000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_4018c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, status, 0) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 1) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 2) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 3) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 4) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 5) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 6) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 7)
#define DT_N_S_soc_S_uart_4018c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4018c000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_4018c000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_4018c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, compatible, 0)
#define DT_N_S_soc_S_uart_4018c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4018c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_bits 12
#define DT_N_S_soc_S_uart_4018c000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4018c000, clocks, 0)
#define DT_N_S_soc_S_uart_4018c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4018c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4018c000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4018c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4018c000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4018c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@40190000
 *
 * Node identifier: DT_N_S_soc_S_uart_40190000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40190000_PATH "/soc/uart@40190000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40190000_FULL_NAME "uart@40190000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40190000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_40190000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40190000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40190000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40190000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40190000_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40190000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40190000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40190000_EXISTS 1
#define DT_N_INST_4_nxp_kinetis_lpuart DT_N_S_soc_S_uart_40190000
#define DT_N_NODELABEL_lpuart4         DT_N_S_soc_S_uart_40190000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40190000_REG_NUM 1
#define DT_N_S_soc_S_uart_40190000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_REG_IDX_0_VAL_ADDRESS 1075380224 /* 0x40190000 */
#define DT_N_S_soc_S_uart_40190000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_40190000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_VAL_irq 23
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_40190000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_40190000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40190000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40190000_P_reg {1075380224 /* 0x40190000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_40190000_P_reg_IDX_0 1075380224
#define DT_N_S_soc_S_uart_40190000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_40190000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40190000, reg, 1)
#define DT_N_S_soc_S_uart_40190000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_interrupts {23 /* 0x17 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_40190000_P_interrupts_IDX_0 23
#define DT_N_S_soc_S_uart_40190000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_40190000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40190000, interrupts, 1)
#define DT_N_S_soc_S_uart_40190000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_label "UART_4"
#define DT_N_S_soc_S_uart_40190000_P_label_STRING_TOKEN UART_4
#define DT_N_S_soc_S_uart_40190000_P_label_STRING_UPPER_TOKEN UART_4
#define DT_N_S_soc_S_uart_40190000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, label, 0) \
	fn(DT_N_S_soc_S_uart_40190000, label, 1) \
	fn(DT_N_S_soc_S_uart_40190000, label, 2) \
	fn(DT_N_S_soc_S_uart_40190000, label, 3) \
	fn(DT_N_S_soc_S_uart_40190000, label, 4) \
	fn(DT_N_S_soc_S_uart_40190000, label, 5)
#define DT_N_S_soc_S_uart_40190000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40190000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_status "disabled"
#define DT_N_S_soc_S_uart_40190000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_40190000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40190000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_40190000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_40190000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40190000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, status, 0) \
	fn(DT_N_S_soc_S_uart_40190000, status, 1) \
	fn(DT_N_S_soc_S_uart_40190000, status, 2) \
	fn(DT_N_S_soc_S_uart_40190000, status, 3) \
	fn(DT_N_S_soc_S_uart_40190000, status, 4) \
	fn(DT_N_S_soc_S_uart_40190000, status, 5) \
	fn(DT_N_S_soc_S_uart_40190000, status, 6) \
	fn(DT_N_S_soc_S_uart_40190000, status, 7)
#define DT_N_S_soc_S_uart_40190000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40190000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_40190000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_40190000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, compatible, 0)
#define DT_N_S_soc_S_uart_40190000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40190000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_uart_40190000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40190000, clocks, 0)
#define DT_N_S_soc_S_uart_40190000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40190000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40190000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40190000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40190000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40190000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@40194000
 *
 * Node identifier: DT_N_S_soc_S_uart_40194000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40194000_PATH "/soc/uart@40194000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40194000_FULL_NAME "uart@40194000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40194000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_40194000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40194000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40194000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40194000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40194000_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40194000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40194000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40194000_EXISTS 1
#define DT_N_INST_5_nxp_kinetis_lpuart DT_N_S_soc_S_uart_40194000
#define DT_N_NODELABEL_lpuart5         DT_N_S_soc_S_uart_40194000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40194000_REG_NUM 1
#define DT_N_S_soc_S_uart_40194000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_REG_IDX_0_VAL_ADDRESS 1075396608 /* 0x40194000 */
#define DT_N_S_soc_S_uart_40194000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_40194000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_VAL_irq 24
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_40194000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_40194000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40194000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40194000_P_reg {1075396608 /* 0x40194000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_40194000_P_reg_IDX_0 1075396608
#define DT_N_S_soc_S_uart_40194000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_40194000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40194000, reg, 1)
#define DT_N_S_soc_S_uart_40194000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_interrupts {24 /* 0x18 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_40194000_P_interrupts_IDX_0 24
#define DT_N_S_soc_S_uart_40194000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_40194000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40194000, interrupts, 1)
#define DT_N_S_soc_S_uart_40194000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_label "UART_5"
#define DT_N_S_soc_S_uart_40194000_P_label_STRING_TOKEN UART_5
#define DT_N_S_soc_S_uart_40194000_P_label_STRING_UPPER_TOKEN UART_5
#define DT_N_S_soc_S_uart_40194000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, label, 0) \
	fn(DT_N_S_soc_S_uart_40194000, label, 1) \
	fn(DT_N_S_soc_S_uart_40194000, label, 2) \
	fn(DT_N_S_soc_S_uart_40194000, label, 3) \
	fn(DT_N_S_soc_S_uart_40194000, label, 4) \
	fn(DT_N_S_soc_S_uart_40194000, label, 5)
#define DT_N_S_soc_S_uart_40194000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40194000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_status "disabled"
#define DT_N_S_soc_S_uart_40194000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_40194000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40194000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_40194000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_40194000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_40194000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, status, 0) \
	fn(DT_N_S_soc_S_uart_40194000, status, 1) \
	fn(DT_N_S_soc_S_uart_40194000, status, 2) \
	fn(DT_N_S_soc_S_uart_40194000, status, 3) \
	fn(DT_N_S_soc_S_uart_40194000, status, 4) \
	fn(DT_N_S_soc_S_uart_40194000, status, 5) \
	fn(DT_N_S_soc_S_uart_40194000, status, 6) \
	fn(DT_N_S_soc_S_uart_40194000, status, 7)
#define DT_N_S_soc_S_uart_40194000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40194000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_40194000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_40194000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, compatible, 0)
#define DT_N_S_soc_S_uart_40194000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40194000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_offset 116
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_bits 2
#define DT_N_S_soc_S_uart_40194000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40194000, clocks, 0)
#define DT_N_S_soc_S_uart_40194000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40194000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40194000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40194000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40194000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40194000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@40198000
 *
 * Node identifier: DT_N_S_soc_S_uart_40198000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_40198000_PATH "/soc/uart@40198000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_40198000_FULL_NAME "uart@40198000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_40198000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_40198000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_40198000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_40198000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_40198000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_40198000_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_40198000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_40198000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_40198000_EXISTS 1
#define DT_N_INST_0_nxp_kinetis_lpuart DT_N_S_soc_S_uart_40198000
#define DT_N_NODELABEL_lpuart6         DT_N_S_soc_S_uart_40198000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_40198000_REG_NUM 1
#define DT_N_S_soc_S_uart_40198000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_REG_IDX_0_VAL_ADDRESS 1075412992 /* 0x40198000 */
#define DT_N_S_soc_S_uart_40198000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_40198000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_40198000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_40198000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_40198000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_40198000_P_reg {1075412992 /* 0x40198000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_40198000_P_reg_IDX_0 1075412992
#define DT_N_S_soc_S_uart_40198000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_40198000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, reg, 0) \
	fn(DT_N_S_soc_S_uart_40198000, reg, 1)
#define DT_N_S_soc_S_uart_40198000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_interrupts {25 /* 0x19 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_40198000_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_uart_40198000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_40198000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_40198000, interrupts, 1)
#define DT_N_S_soc_S_uart_40198000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_current_speed 115200
#define DT_N_S_soc_S_uart_40198000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_label "UART_6"
#define DT_N_S_soc_S_uart_40198000_P_label_STRING_TOKEN UART_6
#define DT_N_S_soc_S_uart_40198000_P_label_STRING_UPPER_TOKEN UART_6
#define DT_N_S_soc_S_uart_40198000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, label, 0) \
	fn(DT_N_S_soc_S_uart_40198000, label, 1) \
	fn(DT_N_S_soc_S_uart_40198000, label, 2) \
	fn(DT_N_S_soc_S_uart_40198000, label, 3) \
	fn(DT_N_S_soc_S_uart_40198000, label, 4) \
	fn(DT_N_S_soc_S_uart_40198000, label, 5)
#define DT_N_S_soc_S_uart_40198000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_40198000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_status "okay"
#define DT_N_S_soc_S_uart_40198000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_40198000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_40198000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_40198000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_40198000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_40198000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, status, 0) \
	fn(DT_N_S_soc_S_uart_40198000, status, 1) \
	fn(DT_N_S_soc_S_uart_40198000, status, 2) \
	fn(DT_N_S_soc_S_uart_40198000, status, 3)
#define DT_N_S_soc_S_uart_40198000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_40198000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_40198000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_40198000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, compatible, 0)
#define DT_N_S_soc_S_uart_40198000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_40198000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_offset 116
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_bits 6
#define DT_N_S_soc_S_uart_40198000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_40198000, clocks, 0)
#define DT_N_S_soc_S_uart_40198000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_40198000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_40198000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_40198000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_40198000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_40198000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@4019c000
 *
 * Node identifier: DT_N_S_soc_S_uart_4019c000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4019c000_PATH "/soc/uart@4019c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4019c000_FULL_NAME "uart@4019c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4019c000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_4019c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4019c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4019c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4019c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4019c000_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4019c000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4019c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4019c000_EXISTS 1
#define DT_N_INST_6_nxp_kinetis_lpuart DT_N_S_soc_S_uart_4019c000
#define DT_N_NODELABEL_lpuart7         DT_N_S_soc_S_uart_4019c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4019c000_REG_NUM 1
#define DT_N_S_soc_S_uart_4019c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_REG_IDX_0_VAL_ADDRESS 1075429376 /* 0x4019c000 */
#define DT_N_S_soc_S_uart_4019c000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_4019c000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_VAL_irq 26
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_4019c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_4019c000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4019c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4019c000_P_reg {1075429376 /* 0x4019c000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_4019c000_P_reg_IDX_0 1075429376
#define DT_N_S_soc_S_uart_4019c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_4019c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, reg, 0) \
	fn(DT_N_S_soc_S_uart_4019c000, reg, 1)
#define DT_N_S_soc_S_uart_4019c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_interrupts {26 /* 0x1a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_IDX_0 26
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_4019c000, interrupts, 1)
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_label "UART_7"
#define DT_N_S_soc_S_uart_4019c000_P_label_STRING_TOKEN UART_7
#define DT_N_S_soc_S_uart_4019c000_P_label_STRING_UPPER_TOKEN UART_7
#define DT_N_S_soc_S_uart_4019c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, label, 0) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 1) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 2) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 3) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 4) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 5)
#define DT_N_S_soc_S_uart_4019c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4019c000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_status "disabled"
#define DT_N_S_soc_S_uart_4019c000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_4019c000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_4019c000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_4019c000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_4019c000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_4019c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, status, 0) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 1) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 2) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 3) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 4) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 5) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 6) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 7)
#define DT_N_S_soc_S_uart_4019c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4019c000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_4019c000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_4019c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, compatible, 0)
#define DT_N_S_soc_S_uart_4019c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4019c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_offset 124
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_bits 26
#define DT_N_S_soc_S_uart_4019c000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4019c000, clocks, 0)
#define DT_N_S_soc_S_uart_4019c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4019c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4019c000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4019c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4019c000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4019c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@401a0000
 *
 * Node identifier: DT_N_S_soc_S_uart_401a0000
 *
 * Binding (compatible = nxp,kinetis-lpuart):
 *   $ZEPHYR_BASE\dts\bindings\serial\nxp,kinetis-lpuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_401a0000_PATH "/soc/uart@401a0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_401a0000_FULL_NAME "uart@401a0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_401a0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_401a0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_401a0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_401a0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_401a0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_401a0000_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_401a0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_401a0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_401a0000_EXISTS 1
#define DT_N_INST_7_nxp_kinetis_lpuart DT_N_S_soc_S_uart_401a0000
#define DT_N_NODELABEL_lpuart8         DT_N_S_soc_S_uart_401a0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_401a0000_REG_NUM 1
#define DT_N_S_soc_S_uart_401a0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_REG_IDX_0_VAL_ADDRESS 1075445760 /* 0x401a0000 */
#define DT_N_S_soc_S_uart_401a0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_uart_401a0000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_VAL_irq 27
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_uart_401a0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_COMPAT_MATCHES_nxp_kinetis_lpuart 1
#define DT_N_S_soc_S_uart_401a0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_401a0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_401a0000_P_reg {1075445760 /* 0x401a0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_uart_401a0000_P_reg_IDX_0 1075445760
#define DT_N_S_soc_S_uart_401a0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_uart_401a0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, reg, 0) \
	fn(DT_N_S_soc_S_uart_401a0000, reg, 1)
#define DT_N_S_soc_S_uart_401a0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_interrupts {27 /* 0x1b */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_IDX_0 27
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_401a0000, interrupts, 1)
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_label "UART_8"
#define DT_N_S_soc_S_uart_401a0000_P_label_STRING_TOKEN UART_8
#define DT_N_S_soc_S_uart_401a0000_P_label_STRING_UPPER_TOKEN UART_8
#define DT_N_S_soc_S_uart_401a0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, label, 0) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 1) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 2) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 3) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 4) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 5)
#define DT_N_S_soc_S_uart_401a0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_401a0000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_status "disabled"
#define DT_N_S_soc_S_uart_401a0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_401a0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_401a0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_401a0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_401a0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_401a0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, status, 0) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 1) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 2) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 3) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 4) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 5) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 6) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 7)
#define DT_N_S_soc_S_uart_401a0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_401a0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_compatible {"nxp,kinetis-lpuart"}
#define DT_N_S_soc_S_uart_401a0000_P_compatible_IDX_0 "nxp,kinetis-lpuart"
#define DT_N_S_soc_S_uart_401a0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, compatible, 0)
#define DT_N_S_soc_S_uart_401a0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_401a0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_offset 128
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_bits 14
#define DT_N_S_soc_S_uart_401a0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_401a0000, clocks, 0)
#define DT_N_S_soc_S_uart_401a0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_401a0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_401a0000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_401a0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_401a0000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_401a0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /system-clock
 *
 * Node identifier: DT_N_S_system_clock
 *
 * Binding (compatible = fixed-clock):
 *   $ZEPHYR_BASE\dts\bindings\clock\fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_system_clock_PATH "/system-clock"

/* Node's name with unit-address: */
#define DT_N_S_system_clock_FULL_NAME "system-clock"

/* Node parent (/) identifier: */
#define DT_N_S_system_clock_PARENT DT_N
#define DT_N_S_system_clock_FOREACH_CHILD(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_system_clock_ORD 45

/* Ordinals for what this node depends on directly: */
#define DT_N_S_system_clock_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_system_clock_SUPPORTS_ORDS \
	46, /* /soc/usbd@402e0000 */

/* Existence and alternate IDs: */
#define DT_N_S_system_clock_EXISTS 1
#define DT_N_INST_0_fixed_clock DT_N_S_system_clock
#define DT_N_NODELABEL_sysclk   DT_N_S_system_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_system_clock_REG_NUM 0
#define DT_N_S_system_clock_IRQ_NUM 0
#define DT_N_S_system_clock_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_system_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_system_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_system_clock_P_clock_frequency 600000000
#define DT_N_S_system_clock_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/usbd@402e0000
 *
 * Node identifier: DT_N_S_soc_S_usbd_402e0000
 *
 * Binding (compatible = nxp,mcux-usbd):
 *   $ZEPHYR_BASE\dts\bindings\usb\nxp,mcux-usbd.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usbd_402e0000_PATH "/soc/usbd@402e0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usbd_402e0000_FULL_NAME "usbd@402e0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usbd_402e0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usbd_402e0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usbd_402e0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usbd_402e0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usbd_402e0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usbd_402e0000_ORD 46

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usbd_402e0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	45, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usbd_402e0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usbd_402e0000_EXISTS 1
#define DT_N_INST_0_nxp_mcux_usbd  DT_N_S_soc_S_usbd_402e0000
#define DT_N_NODELABEL_usb1        DT_N_S_soc_S_usbd_402e0000
#define DT_N_NODELABEL_zephyr_udc0 DT_N_S_soc_S_usbd_402e0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usbd_402e0000_REG_NUM 1
#define DT_N_S_soc_S_usbd_402e0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_REG_IDX_0_VAL_ADDRESS 1076756480 /* 0x402e0000 */
#define DT_N_S_soc_S_usbd_402e0000_REG_IDX_0_VAL_SIZE 512 /* 0x200 */
#define DT_N_S_soc_S_usbd_402e0000_IRQ_NUM 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_irq 113
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_NAME_usb_otg_VAL_irq DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_usbd_402e0000_IRQ_NAME_usb_otg_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_IRQ_NAME_usb_otg_VAL_priority DT_N_S_soc_S_usbd_402e0000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_usbd_402e0000_IRQ_NAME_usb_otg_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_COMPAT_MATCHES_nxp_mcux_usbd 1
#define DT_N_S_soc_S_usbd_402e0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usbd_402e0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usbd_402e0000_P_reg {1076756480 /* 0x402e0000 */, 512 /* 0x200 */}
#define DT_N_S_soc_S_usbd_402e0000_P_reg_IDX_0 1076756480
#define DT_N_S_soc_S_usbd_402e0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_reg_IDX_1 512
#define DT_N_S_soc_S_usbd_402e0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, reg, 0) \
	fn(DT_N_S_soc_S_usbd_402e0000, reg, 1)
#define DT_N_S_soc_S_usbd_402e0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts {113 /* 0x71 */, 1 /* 0x1 */}
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_IDX_0 113
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, interrupts, 0) \
	fn(DT_N_S_soc_S_usbd_402e0000, interrupts, 1)
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_num_bidir_endpoints 8
#define DT_N_S_soc_S_usbd_402e0000_P_num_bidir_endpoints_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed "full-speed"
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_STRING_TOKEN full_speed
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_STRING_UPPER_TOKEN FULL_SPEED
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_ENUM_IDX 1
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_ENUM_TOKEN full_speed
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_ENUM_UPPER_TOKEN FULL_SPEED
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 0) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 1) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 2) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 3) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 4) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 5) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 6) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 7) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 8) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 9)
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, maximum_speed, 9, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_maximum_speed_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_label "USBD_1"
#define DT_N_S_soc_S_usbd_402e0000_P_label_STRING_TOKEN USBD_1
#define DT_N_S_soc_S_usbd_402e0000_P_label_STRING_UPPER_TOKEN USBD_1
#define DT_N_S_soc_S_usbd_402e0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, label, 0) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 1) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 2) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 3) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 4) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 5)
#define DT_N_S_soc_S_usbd_402e0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_label_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_status "okay"
#define DT_N_S_soc_S_usbd_402e0000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_usbd_402e0000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usbd_402e0000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_usbd_402e0000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_usbd_402e0000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usbd_402e0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, status, 0) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 1) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 2) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 3)
#define DT_N_S_soc_S_usbd_402e0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_status_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_compatible {"nxp,mcux-usbd"}
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_IDX_0 "nxp,mcux-usbd"
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, compatible, 0)
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_LEN 1
#define DT_N_S_soc_S_usbd_402e0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names {"usb_otg"}
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_IDX_0 "usb_otg"
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, interrupt_names, 0)
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_usbd_402e0000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0000, clocks, 0)
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_LEN 1
#define DT_N_S_soc_S_usbd_402e0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0000_P_wakeup_source 0
#define DT_N_S_soc_S_usbd_402e0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/usbd@402e0200
 *
 * Node identifier: DT_N_S_soc_S_usbd_402e0200
 *
 * Binding (compatible = nxp,mcux-usbd):
 *   $ZEPHYR_BASE\dts\bindings\usb\nxp,mcux-usbd.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usbd_402e0200_PATH "/soc/usbd@402e0200"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usbd_402e0200_FULL_NAME "usbd@402e0200"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usbd_402e0200_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usbd_402e0200_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usbd_402e0200_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usbd_402e0200_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usbd_402e0200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usbd_402e0200_ORD 47

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usbd_402e0200_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usbd_402e0200_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usbd_402e0200_EXISTS 1
#define DT_N_INST_1_nxp_mcux_usbd DT_N_S_soc_S_usbd_402e0200
#define DT_N_NODELABEL_usb2       DT_N_S_soc_S_usbd_402e0200

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usbd_402e0200_REG_NUM 1
#define DT_N_S_soc_S_usbd_402e0200_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_REG_IDX_0_VAL_ADDRESS 1076756992 /* 0x402e0200 */
#define DT_N_S_soc_S_usbd_402e0200_REG_IDX_0_VAL_SIZE 512 /* 0x200 */
#define DT_N_S_soc_S_usbd_402e0200_IRQ_NUM 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_irq 112
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_NAME_usb_otg_VAL_irq DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_usbd_402e0200_IRQ_NAME_usb_otg_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_IRQ_NAME_usb_otg_VAL_priority DT_N_S_soc_S_usbd_402e0200_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_usbd_402e0200_IRQ_NAME_usb_otg_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_COMPAT_MATCHES_nxp_mcux_usbd 1
#define DT_N_S_soc_S_usbd_402e0200_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usbd_402e0200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usbd_402e0200_P_reg {1076756992 /* 0x402e0200 */, 512 /* 0x200 */}
#define DT_N_S_soc_S_usbd_402e0200_P_reg_IDX_0 1076756992
#define DT_N_S_soc_S_usbd_402e0200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_reg_IDX_1 512
#define DT_N_S_soc_S_usbd_402e0200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, reg, 0) \
	fn(DT_N_S_soc_S_usbd_402e0200, reg, 1)
#define DT_N_S_soc_S_usbd_402e0200_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_reg_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts {112 /* 0x70 */, 1 /* 0x1 */}
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_IDX_0 112
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, interrupts, 0) \
	fn(DT_N_S_soc_S_usbd_402e0200, interrupts, 1)
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_num_bidir_endpoints 8
#define DT_N_S_soc_S_usbd_402e0200_P_num_bidir_endpoints_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed "full-speed"
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_STRING_TOKEN full_speed
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_STRING_UPPER_TOKEN FULL_SPEED
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_ENUM_IDX 1
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_ENUM_TOKEN full_speed
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_ENUM_UPPER_TOKEN FULL_SPEED
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 0) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 1) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 2) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 3) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 4) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 5) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 6) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 7) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 8) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 9)
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, maximum_speed, 9, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_maximum_speed_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_label "USBD_2"
#define DT_N_S_soc_S_usbd_402e0200_P_label_STRING_TOKEN USBD_2
#define DT_N_S_soc_S_usbd_402e0200_P_label_STRING_UPPER_TOKEN USBD_2
#define DT_N_S_soc_S_usbd_402e0200_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, label, 0) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 1) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 2) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 3) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 4) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 5)
#define DT_N_S_soc_S_usbd_402e0200_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_label_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_status "disabled"
#define DT_N_S_soc_S_usbd_402e0200_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usbd_402e0200_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usbd_402e0200_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usbd_402e0200_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usbd_402e0200_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usbd_402e0200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, status, 0) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 1) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 2) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 3) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 4) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 5) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 6) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 7)
#define DT_N_S_soc_S_usbd_402e0200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usbd_402e0200, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_status_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_compatible {"nxp,mcux-usbd"}
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_IDX_0 "nxp,mcux-usbd"
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, compatible, 0)
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_LEN 1
#define DT_N_S_soc_S_usbd_402e0200_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names {"usb_otg"}
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_IDX_0 "usb_otg"
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usbd_402e0200, interrupt_names, 0)
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usbd_402e0200, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_usbd_402e0200_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_usbd_402e0200_P_wakeup_source 0
#define DT_N_S_soc_S_usbd_402e0200_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/usdhc@402c0000
 *
 * Node identifier: DT_N_S_soc_S_usdhc_402c0000
 *
 * Binding (compatible = nxp,imx-usdhc):
 *   $ZEPHYR_BASE\dts\bindings\mmc\nxp,imx-usdhc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usdhc_402c0000_PATH "/soc/usdhc@402c0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usdhc_402c0000_FULL_NAME "usdhc@402c0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usdhc_402c0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usdhc_402c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usdhc_402c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usdhc_402c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usdhc_402c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usdhc_402c0000_ORD 48

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usdhc_402c0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usdhc_402c0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usdhc_402c0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_usdhc DT_N_S_soc_S_usdhc_402c0000
#define DT_N_NODELABEL_usdhc1     DT_N_S_soc_S_usdhc_402c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usdhc_402c0000_REG_NUM 1
#define DT_N_S_soc_S_usdhc_402c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_REG_IDX_0_VAL_ADDRESS 1076625408 /* 0x402c0000 */
#define DT_N_S_soc_S_usdhc_402c0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_NUM 1
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_VAL_irq 110
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_usdhc_402c0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_COMPAT_MATCHES_nxp_imx_usdhc 1
#define DT_N_S_soc_S_usdhc_402c0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usdhc_402c0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_name 6
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_offset 0
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_bits 0
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, clocks, 0)
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_LEN 1
#define DT_N_S_soc_S_usdhc_402c0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_no_1_8_v 0
#define DT_N_S_soc_S_usdhc_402c0000_P_no_1_8_v_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_label "USDHC_1"
#define DT_N_S_soc_S_usdhc_402c0000_P_label_STRING_TOKEN USDHC_1
#define DT_N_S_soc_S_usdhc_402c0000_P_label_STRING_UPPER_TOKEN USDHC_1
#define DT_N_S_soc_S_usdhc_402c0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, label, 0) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 1) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 2) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 3) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 4) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 5) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 6)
#define DT_N_S_soc_S_usdhc_402c0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_label_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_status "disabled"
#define DT_N_S_soc_S_usdhc_402c0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usdhc_402c0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usdhc_402c0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usdhc_402c0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usdhc_402c0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usdhc_402c0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, status, 0) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 1) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 2) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 3) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 4) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 5) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 6) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 7)
#define DT_N_S_soc_S_usdhc_402c0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_status_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible {"nxp,imx-usdhc"}
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_IDX_0 "nxp,imx-usdhc"
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, compatible, 0)
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_LEN 1
#define DT_N_S_soc_S_usdhc_402c0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_reg {1076625408 /* 0x402c0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_IDX_0 1076625408
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, reg, 0) \
	fn(DT_N_S_soc_S_usdhc_402c0000, reg, 1)
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts {110 /* 0x6e */, 0 /* 0x0 */}
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_IDX_0 110
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c0000, interrupts, 0) \
	fn(DT_N_S_soc_S_usdhc_402c0000, interrupts, 1)
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c0000_P_wakeup_source 0
#define DT_N_S_soc_S_usdhc_402c0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/usdhc@402c4000
 *
 * Node identifier: DT_N_S_soc_S_usdhc_402c4000
 *
 * Binding (compatible = nxp,imx-usdhc):
 *   $ZEPHYR_BASE\dts\bindings\mmc\nxp,imx-usdhc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usdhc_402c4000_PATH "/soc/usdhc@402c4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usdhc_402c4000_FULL_NAME "usdhc@402c4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usdhc_402c4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usdhc_402c4000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usdhc_402c4000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usdhc_402c4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usdhc_402c4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usdhc_402c4000_ORD 49

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usdhc_402c4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */ \
	11, /* /soc/ccm@400fc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usdhc_402c4000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usdhc_402c4000_EXISTS 1
#define DT_N_INST_1_nxp_imx_usdhc DT_N_S_soc_S_usdhc_402c4000
#define DT_N_NODELABEL_usdhc2     DT_N_S_soc_S_usdhc_402c4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usdhc_402c4000_REG_NUM 1
#define DT_N_S_soc_S_usdhc_402c4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_REG_IDX_0_VAL_ADDRESS 1076641792 /* 0x402c4000 */
#define DT_N_S_soc_S_usdhc_402c4000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_NUM 1
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_VAL_irq 111
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_usdhc_402c4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_COMPAT_MATCHES_nxp_imx_usdhc 1
#define DT_N_S_soc_S_usdhc_402c4000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usdhc_402c4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_400fc000
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_name 7
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_offset 0
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_bits 0
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, clocks, 0)
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_LEN 1
#define DT_N_S_soc_S_usdhc_402c4000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_no_1_8_v 0
#define DT_N_S_soc_S_usdhc_402c4000_P_no_1_8_v_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_label "USDHC_2"
#define DT_N_S_soc_S_usdhc_402c4000_P_label_STRING_TOKEN USDHC_2
#define DT_N_S_soc_S_usdhc_402c4000_P_label_STRING_UPPER_TOKEN USDHC_2
#define DT_N_S_soc_S_usdhc_402c4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, label, 0) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 1) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 2) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 3) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 4) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 5) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 6)
#define DT_N_S_soc_S_usdhc_402c4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_label_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_status "disabled"
#define DT_N_S_soc_S_usdhc_402c4000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usdhc_402c4000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usdhc_402c4000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usdhc_402c4000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usdhc_402c4000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usdhc_402c4000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, status, 0) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 1) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 2) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 3) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 4) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 5) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 6) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 7)
#define DT_N_S_soc_S_usdhc_402c4000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_status_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible {"nxp,imx-usdhc"}
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_IDX_0 "nxp,imx-usdhc"
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, compatible, 0)
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_LEN 1
#define DT_N_S_soc_S_usdhc_402c4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_reg {1076641792 /* 0x402c4000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_IDX_0 1076641792
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, reg, 0) \
	fn(DT_N_S_soc_S_usdhc_402c4000, reg, 1)
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts {111 /* 0x6f */, 0 /* 0x0 */}
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_IDX_0 111
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usdhc_402c4000, interrupts, 0) \
	fn(DT_N_S_soc_S_usdhc_402c4000, interrupts, 1)
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usdhc_402c4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usdhc_402c4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usdhc_402c4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_usdhc_402c4000_P_wakeup_source 0
#define DT_N_S_soc_S_usdhc_402c4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/wdog@400b8000
 *
 * Node identifier: DT_N_S_soc_S_wdog_400b8000
 *
 * Binding (compatible = nxp,imx-wdog):
 *   $ZEPHYR_BASE\dts\bindings\watchdog\nxp,imx-wdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_wdog_400b8000_PATH "/soc/wdog@400b8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_wdog_400b8000_FULL_NAME "wdog@400b8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_wdog_400b8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_wdog_400b8000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_wdog_400b8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_400b8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_wdog_400b8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_wdog_400b8000_ORD 50

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_wdog_400b8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_wdog_400b8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_wdog_400b8000_EXISTS 1
#define DT_N_INST_0_nxp_imx_wdog DT_N_S_soc_S_wdog_400b8000
#define DT_N_NODELABEL_wdog0     DT_N_S_soc_S_wdog_400b8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_wdog_400b8000_REG_NUM 1
#define DT_N_S_soc_S_wdog_400b8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_REG_IDX_0_VAL_ADDRESS 1074495488 /* 0x400b8000 */
#define DT_N_S_soc_S_wdog_400b8000_REG_IDX_0_VAL_SIZE 10 /* 0xa */
#define DT_N_S_soc_S_wdog_400b8000_IRQ_NUM 1
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_VAL_irq 92
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_wdog_400b8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_COMPAT_MATCHES_nxp_imx_wdog 1
#define DT_N_S_soc_S_wdog_400b8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_wdog_400b8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_wdog_400b8000_P_reg {1074495488 /* 0x400b8000 */, 10 /* 0xa */}
#define DT_N_S_soc_S_wdog_400b8000_P_reg_IDX_0 1074495488
#define DT_N_S_soc_S_wdog_400b8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_reg_IDX_1 10
#define DT_N_S_soc_S_wdog_400b8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400b8000, reg, 0) \
	fn(DT_N_S_soc_S_wdog_400b8000, reg, 1)
#define DT_N_S_soc_S_wdog_400b8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400b8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400b8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_label "WDOG0"
#define DT_N_S_soc_S_wdog_400b8000_P_label_STRING_TOKEN WDOG0
#define DT_N_S_soc_S_wdog_400b8000_P_label_STRING_UPPER_TOKEN WDOG0
#define DT_N_S_soc_S_wdog_400b8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400b8000, label, 0) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 1) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 2) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 3) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 4)
#define DT_N_S_soc_S_wdog_400b8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400b8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400b8000_P_label_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts {92 /* 0x5c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_IDX_0 92
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400b8000, interrupts, 0) \
	fn(DT_N_S_soc_S_wdog_400b8000, interrupts, 1)
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400b8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400b8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_status "disabled"
#define DT_N_S_soc_S_wdog_400b8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_wdog_400b8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_400b8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_wdog_400b8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_wdog_400b8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_400b8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400b8000, status, 0) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 1) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 2) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 3) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 4) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 5) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 6) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 7)
#define DT_N_S_soc_S_wdog_400b8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400b8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400b8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400b8000_P_status_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_compatible {"nxp,imx-wdog"}
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_IDX_0 "nxp,imx-wdog"
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400b8000, compatible, 0)
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400b8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_LEN 1
#define DT_N_S_soc_S_wdog_400b8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_wdog_400b8000_P_wakeup_source 0
#define DT_N_S_soc_S_wdog_400b8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/wdog@400d0000
 *
 * Node identifier: DT_N_S_soc_S_wdog_400d0000
 *
 * Binding (compatible = nxp,imx-wdog):
 *   $ZEPHYR_BASE\dts\bindings\watchdog\nxp,imx-wdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_wdog_400d0000_PATH "/soc/wdog@400d0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_wdog_400d0000_FULL_NAME "wdog@400d0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_wdog_400d0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_wdog_400d0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_wdog_400d0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_wdog_400d0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_wdog_400d0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_wdog_400d0000_ORD 51

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_wdog_400d0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_wdog_400d0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_wdog_400d0000_EXISTS 1
#define DT_N_INST_1_nxp_imx_wdog DT_N_S_soc_S_wdog_400d0000
#define DT_N_NODELABEL_wdog1     DT_N_S_soc_S_wdog_400d0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_wdog_400d0000_REG_NUM 1
#define DT_N_S_soc_S_wdog_400d0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_REG_IDX_0_VAL_ADDRESS 1074593792 /* 0x400d0000 */
#define DT_N_S_soc_S_wdog_400d0000_REG_IDX_0_VAL_SIZE 10 /* 0xa */
#define DT_N_S_soc_S_wdog_400d0000_IRQ_NUM 1
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_VAL_irq 45
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_wdog_400d0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_COMPAT_MATCHES_nxp_imx_wdog 1
#define DT_N_S_soc_S_wdog_400d0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_wdog_400d0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_wdog_400d0000_P_reg {1074593792 /* 0x400d0000 */, 10 /* 0xa */}
#define DT_N_S_soc_S_wdog_400d0000_P_reg_IDX_0 1074593792
#define DT_N_S_soc_S_wdog_400d0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_reg_IDX_1 10
#define DT_N_S_soc_S_wdog_400d0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400d0000, reg, 0) \
	fn(DT_N_S_soc_S_wdog_400d0000, reg, 1)
#define DT_N_S_soc_S_wdog_400d0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400d0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400d0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_label "WDOG1"
#define DT_N_S_soc_S_wdog_400d0000_P_label_STRING_TOKEN WDOG1
#define DT_N_S_soc_S_wdog_400d0000_P_label_STRING_UPPER_TOKEN WDOG1
#define DT_N_S_soc_S_wdog_400d0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400d0000, label, 0) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 1) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 2) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 3) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 4)
#define DT_N_S_soc_S_wdog_400d0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400d0000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400d0000_P_label_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts {45 /* 0x2d */, 0 /* 0x0 */}
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_IDX_0 45
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400d0000, interrupts, 0) \
	fn(DT_N_S_soc_S_wdog_400d0000, interrupts, 1)
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400d0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400d0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_status "disabled"
#define DT_N_S_soc_S_wdog_400d0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_wdog_400d0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_400d0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_wdog_400d0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_wdog_400d0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_wdog_400d0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400d0000, status, 0) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 1) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 2) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 3) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 4) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 5) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 6) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 7)
#define DT_N_S_soc_S_wdog_400d0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400d0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_wdog_400d0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400d0000_P_status_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_compatible {"nxp,imx-wdog"}
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_IDX_0 "nxp,imx-wdog"
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_wdog_400d0000, compatible, 0)
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_wdog_400d0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_LEN 1
#define DT_N_S_soc_S_wdog_400d0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_wdog_400d0000_P_wakeup_source 0
#define DT_N_S_soc_S_wdog_400d0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@402d4000
 *
 * Node identifier: DT_N_S_soc_S_ethernet_402d4000
 *
 * Binding (compatible = nxp,kinetis-ethernet):
 *   $ZEPHYR_BASE\dts\bindings\ethernet\nxp,kinetis-ethernet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_402d4000_PATH "/soc/ethernet@402d4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_402d4000_FULL_NAME "ethernet@402d4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ethernet_402d4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ethernet_402d4000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp)
#define DT_N_S_soc_S_ethernet_402d4000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_402d4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_402d4000_ORD 52

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_402d4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_402d4000_SUPPORTS_ORDS \
	53, /* /soc/ethernet@402d4000/ptp */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_402d4000_EXISTS 1
#define DT_N_INST_1_nxp_kinetis_ethernet DT_N_S_soc_S_ethernet_402d4000
#define DT_N_NODELABEL_enet2             DT_N_S_soc_S_ethernet_402d4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_402d4000_REG_NUM 1
#define DT_N_S_soc_S_ethernet_402d4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_REG_IDX_0_VAL_ADDRESS 1076707328 /* 0x402d4000 */
#define DT_N_S_soc_S_ethernet_402d4000_REG_IDX_0_VAL_SIZE 1576 /* 0x628 */
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_irq 152
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_NAME_common_VAL_irq DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_NAME_common_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_NAME_common_VAL_priority DT_N_S_soc_S_ethernet_402d4000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_ethernet_402d4000_IRQ_NAME_common_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_COMPAT_MATCHES_nxp_kinetis_ethernet 1
#define DT_N_S_soc_S_ethernet_402d4000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_402d4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_402d4000_P_reg {1076707328 /* 0x402d4000 */, 1576 /* 0x628 */}
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_IDX_0 1076707328
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_IDX_1 1576
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, reg, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000, reg, 1)
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts {152 /* 0x98 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_IDX_0 152
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000, interrupts, 1)
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_label "ETH_1"
#define DT_N_S_soc_S_ethernet_402d4000_P_label_STRING_TOKEN ETH_1
#define DT_N_S_soc_S_ethernet_402d4000_P_label_STRING_UPPER_TOKEN ETH_1
#define DT_N_S_soc_S_ethernet_402d4000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, label, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 1) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 2) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 3) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 4)
#define DT_N_S_soc_S_ethernet_402d4000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_label_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_zephyr_random_mac_address 0
#define DT_N_S_soc_S_ethernet_402d4000_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_status "disabled"
#define DT_N_S_soc_S_ethernet_402d4000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d4000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d4000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ethernet_402d4000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d4000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d4000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, status, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 1) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 2) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 3) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 4) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 5) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 6) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 7)
#define DT_N_S_soc_S_ethernet_402d4000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible {"nxp,kinetis-ethernet"}
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_IDX_0 "nxp,kinetis-ethernet"
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, compatible, 0)
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_402d4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names {"COMMON"}
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_IDX_0 "COMMON"
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000, interrupt_names, 0)
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_ethernet_402d4000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_402d4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@402d4000/ptp
 *
 * Node identifier: DT_N_S_soc_S_ethernet_402d4000_S_ptp
 *
 * Binding (compatible = nxp,kinetis-ptp):
 *   $ZEPHYR_BASE\dts\bindings\ethernet\nxp,kinetis-ptp.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_PATH "/soc/ethernet@402d4000/ptp"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_FULL_NAME "ptp"

/* Node parent (/soc/ethernet@402d4000) identifier: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_PARENT DT_N_S_soc_S_ethernet_402d4000
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_ORD 53

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	52, /* /soc/ethernet@402d4000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_EXISTS 1
#define DT_N_INST_1_nxp_kinetis_ptp DT_N_S_soc_S_ethernet_402d4000_S_ptp

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_REG_NUM 0
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_irq 153
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_irq DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_priority DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_COMPAT_MATCHES_nxp_kinetis_ptp 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts {153 /* 0x99 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_IDX_0 153
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupts, 1)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status "disabled"
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 0) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 1) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 2) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 3) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 4) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 5) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 6) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 7)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible {"nxp,kinetis-ptp"}
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_IDX_0 "nxp,kinetis-ptp"
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, compatible, 0)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names {"IEEE1588_TMR"}
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_IDX_0 "IEEE1588_TMR"
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupt_names, 0)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d4000_S_ptp, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_402d4000_S_ptp_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@402d8000
 *
 * Node identifier: DT_N_S_soc_S_ethernet_402d8000
 *
 * Binding (compatible = nxp,kinetis-ethernet):
 *   $ZEPHYR_BASE\dts\bindings\ethernet\nxp,kinetis-ethernet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_402d8000_PATH "/soc/ethernet@402d8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_402d8000_FULL_NAME "ethernet@402d8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ethernet_402d8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ethernet_402d8000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp)
#define DT_N_S_soc_S_ethernet_402d8000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_402d8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_402d8000_ORD 54

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_402d8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_402d8000_SUPPORTS_ORDS \
	55, /* /soc/ethernet@402d8000/ptp */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_402d8000_EXISTS 1
#define DT_N_INST_0_nxp_kinetis_ethernet DT_N_S_soc_S_ethernet_402d8000
#define DT_N_NODELABEL_enet              DT_N_S_soc_S_ethernet_402d8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_402d8000_REG_NUM 1
#define DT_N_S_soc_S_ethernet_402d8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_REG_IDX_0_VAL_ADDRESS 1076723712 /* 0x402d8000 */
#define DT_N_S_soc_S_ethernet_402d8000_REG_IDX_0_VAL_SIZE 1576 /* 0x628 */
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_irq 114
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_NAME_common_VAL_irq DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_NAME_common_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_NAME_common_VAL_priority DT_N_S_soc_S_ethernet_402d8000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_ethernet_402d8000_IRQ_NAME_common_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_COMPAT_MATCHES_nxp_kinetis_ethernet 1
#define DT_N_S_soc_S_ethernet_402d8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_402d8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_402d8000_P_reg {1076723712 /* 0x402d8000 */, 1576 /* 0x628 */}
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_IDX_0 1076723712
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_IDX_1 1576
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, reg, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000, reg, 1)
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts {114 /* 0x72 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_IDX_0 114
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000, interrupts, 1)
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_label "ETH_0"
#define DT_N_S_soc_S_ethernet_402d8000_P_label_STRING_TOKEN ETH_0
#define DT_N_S_soc_S_ethernet_402d8000_P_label_STRING_UPPER_TOKEN ETH_0
#define DT_N_S_soc_S_ethernet_402d8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, label, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 1) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 2) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 3) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 4)
#define DT_N_S_soc_S_ethernet_402d8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_label_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_zephyr_random_mac_address 0
#define DT_N_S_soc_S_ethernet_402d8000_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_status "disabled"
#define DT_N_S_soc_S_ethernet_402d8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ethernet_402d8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, status, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 1) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 2) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 3) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 4) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 5) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 6) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 7)
#define DT_N_S_soc_S_ethernet_402d8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible {"nxp,kinetis-ethernet"}
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_IDX_0 "nxp,kinetis-ethernet"
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, compatible, 0)
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_402d8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names {"COMMON"}
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_IDX_0 "COMMON"
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000, interrupt_names, 0)
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_ethernet_402d8000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_402d8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@402d8000/ptp
 *
 * Node identifier: DT_N_S_soc_S_ethernet_402d8000_S_ptp
 *
 * Binding (compatible = nxp,kinetis-ptp):
 *   $ZEPHYR_BASE\dts\bindings\ethernet\nxp,kinetis-ptp.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_PATH "/soc/ethernet@402d8000/ptp"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_FULL_NAME "ptp"

/* Node parent (/soc/ethernet@402d8000) identifier: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_PARENT DT_N_S_soc_S_ethernet_402d8000
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_ORD 55

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	54, /* /soc/ethernet@402d8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_EXISTS 1
#define DT_N_INST_0_nxp_kinetis_ptp DT_N_S_soc_S_ethernet_402d8000_S_ptp

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_REG_NUM 0
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_irq 115
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_irq DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_priority DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_IRQ_NAME_ieee1588_tmr_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_COMPAT_MATCHES_nxp_kinetis_ptp 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts {115 /* 0x73 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_IDX_0 115
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupts, 1)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status "disabled"
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 0) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 1) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 2) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 3) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 4) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 5) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 6) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 7)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible {"nxp,kinetis-ptp"}
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_IDX_0 "nxp,kinetis-ptp"
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, compatible, 0)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names {"IEEE1588_TMR"}
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_IDX_0 "IEEE1588_TMR"
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupt_names, 0)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_402d8000_S_ptp, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_402d8000_S_ptp_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403dc000
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403dc000
 *
 * Binding (compatible = nxp,flexpwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,flexpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403dc000_PATH "/soc/flexpwm@403dc000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403dc000_FULL_NAME "flexpwm@403dc000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexpwm_403dc000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flexpwm_403dc000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3)
#define DT_N_S_soc_S_flexpwm_403dc000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403dc000_ORD 56

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403dc000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403dc000_SUPPORTS_ORDS \
	57, /* /soc/flexpwm@403dc000/pwm0 */ \
	58, /* /soc/flexpwm@403dc000/pwm1 */ \
	59, /* /soc/flexpwm@403dc000/pwm2 */ \
	60, /* /soc/flexpwm@403dc000/pwm3 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403dc000_EXISTS 1
#define DT_N_INST_0_nxp_flexpwm DT_N_S_soc_S_flexpwm_403dc000
#define DT_N_NODELABEL_flexpwm1 DT_N_S_soc_S_flexpwm_403dc000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403dc000_REG_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_REG_IDX_0_VAL_ADDRESS 1077788672 /* 0x403dc000 */
#define DT_N_S_soc_S_flexpwm_403dc000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_VAL_irq 106
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403dc000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_COMPAT_MATCHES_nxp_flexpwm 1
#define DT_N_S_soc_S_flexpwm_403dc000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403dc000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg {1077788672 /* 0x403dc000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_IDX_0 1077788672
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000, reg, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000, reg, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts {106 /* 0x6a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_IDX_0 106
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible {"nxp,flexpwm"}
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_IDX_0 "nxp,flexpwm"
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403dc000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403dc000/pwm0
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403dc000_S_pwm0
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_PATH "/soc/flexpwm@403dc000/pwm0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_FULL_NAME "pwm0"

/* Node parent (/soc/flexpwm@403dc000) identifier: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_PARENT DT_N_S_soc_S_flexpwm_403dc000
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_ORD 57

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	56, /* /soc/flexpwm@403dc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_EXISTS 1
#define DT_N_INST_0_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403dc000_S_pwm0
#define DT_N_NODELABEL_flexpwm1_pwm0 DT_N_S_soc_S_flexpwm_403dc000_S_pwm0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_VAL_irq 102
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_index 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts {102 /* 0x66 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_IDX_0 102
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label "FLEXPWM1_PWM0"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label_STRING_TOKEN FLEXPWM1_PWM0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label_STRING_UPPER_TOKEN FLEXPWM1_PWM0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 12)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 7)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403dc000/pwm1
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403dc000_S_pwm1
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_PATH "/soc/flexpwm@403dc000/pwm1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_FULL_NAME "pwm1"

/* Node parent (/soc/flexpwm@403dc000) identifier: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_PARENT DT_N_S_soc_S_flexpwm_403dc000
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_ORD 58

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	56, /* /soc/flexpwm@403dc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_EXISTS 1
#define DT_N_INST_1_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403dc000_S_pwm1
#define DT_N_NODELABEL_flexpwm1_pwm1 DT_N_S_soc_S_flexpwm_403dc000_S_pwm1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_VAL_irq 103
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_index 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts {103 /* 0x67 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_IDX_0 103
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label "FLEXPWM1_PWM1"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label_STRING_TOKEN FLEXPWM1_PWM1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label_STRING_UPPER_TOKEN FLEXPWM1_PWM1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 12)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 7)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403dc000/pwm2
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403dc000_S_pwm2
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_PATH "/soc/flexpwm@403dc000/pwm2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_FULL_NAME "pwm2"

/* Node parent (/soc/flexpwm@403dc000) identifier: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_PARENT DT_N_S_soc_S_flexpwm_403dc000
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_ORD 59

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	56, /* /soc/flexpwm@403dc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_EXISTS 1
#define DT_N_INST_2_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403dc000_S_pwm2
#define DT_N_NODELABEL_flexpwm1_pwm2 DT_N_S_soc_S_flexpwm_403dc000_S_pwm2

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_VAL_irq 104
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_index 2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts {104 /* 0x68 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_IDX_0 104
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label "FLEXPWM1_PWM2"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label_STRING_TOKEN FLEXPWM1_PWM2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label_STRING_UPPER_TOKEN FLEXPWM1_PWM2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 12)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 7)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm2, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm2_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403dc000/pwm3
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403dc000_S_pwm3
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_PATH "/soc/flexpwm@403dc000/pwm3"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_FULL_NAME "pwm3"

/* Node parent (/soc/flexpwm@403dc000) identifier: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_PARENT DT_N_S_soc_S_flexpwm_403dc000
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_ORD 60

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	56, /* /soc/flexpwm@403dc000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_EXISTS 1
#define DT_N_INST_3_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403dc000_S_pwm3
#define DT_N_NODELABEL_flexpwm1_pwm3 DT_N_S_soc_S_flexpwm_403dc000_S_pwm3

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_VAL_irq 105
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_index 3
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts {105 /* 0x69 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_IDX_0 105
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label "FLEXPWM1_PWM3"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label_STRING_TOKEN FLEXPWM1_PWM3
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label_STRING_UPPER_TOKEN FLEXPWM1_PWM3
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 12)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 7)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000_S_pwm3, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403dc000_S_pwm3_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e0000
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e0000
 *
 * Binding (compatible = nxp,flexpwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,flexpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e0000_PATH "/soc/flexpwm@403e0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e0000_FULL_NAME "flexpwm@403e0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexpwm_403e0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flexpwm_403e0000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3)
#define DT_N_S_soc_S_flexpwm_403e0000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e0000_ORD 61

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e0000_SUPPORTS_ORDS \
	62, /* /soc/flexpwm@403e0000/pwm0 */ \
	63, /* /soc/flexpwm@403e0000/pwm1 */ \
	64, /* /soc/flexpwm@403e0000/pwm2 */ \
	65, /* /soc/flexpwm@403e0000/pwm3 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e0000_EXISTS 1
#define DT_N_INST_1_nxp_flexpwm DT_N_S_soc_S_flexpwm_403e0000
#define DT_N_NODELABEL_flexpwm2 DT_N_S_soc_S_flexpwm_403e0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e0000_REG_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_REG_IDX_0_VAL_ADDRESS 1077805056 /* 0x403e0000 */
#define DT_N_S_soc_S_flexpwm_403e0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_VAL_irq 141
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_COMPAT_MATCHES_nxp_flexpwm 1
#define DT_N_S_soc_S_flexpwm_403e0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg {1077805056 /* 0x403e0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_IDX_0 1077805056
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000, reg, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000, reg, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts {141 /* 0x8d */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_IDX_0 141
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible {"nxp,flexpwm"}
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_IDX_0 "nxp,flexpwm"
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e0000/pwm0
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e0000_S_pwm0
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_PATH "/soc/flexpwm@403e0000/pwm0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_FULL_NAME "pwm0"

/* Node parent (/soc/flexpwm@403e0000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_PARENT DT_N_S_soc_S_flexpwm_403e0000
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_ORD 62

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	61, /* /soc/flexpwm@403e0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_EXISTS 1
#define DT_N_INST_4_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e0000_S_pwm0
#define DT_N_NODELABEL_flexpwm2_pwm0 DT_N_S_soc_S_flexpwm_403e0000_S_pwm0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_VAL_irq 137
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_index 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts {137 /* 0x89 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_IDX_0 137
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label "FLEXPWM2_PWM0"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label_STRING_TOKEN FLEXPWM2_PWM0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label_STRING_UPPER_TOKEN FLEXPWM2_PWM0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 12)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 7)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e0000/pwm1
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e0000_S_pwm1
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_PATH "/soc/flexpwm@403e0000/pwm1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_FULL_NAME "pwm1"

/* Node parent (/soc/flexpwm@403e0000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_PARENT DT_N_S_soc_S_flexpwm_403e0000
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_ORD 63

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	61, /* /soc/flexpwm@403e0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_EXISTS 1
#define DT_N_INST_5_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e0000_S_pwm1
#define DT_N_NODELABEL_flexpwm2_pwm1 DT_N_S_soc_S_flexpwm_403e0000_S_pwm1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_VAL_irq 138
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_index 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts {138 /* 0x8a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_IDX_0 138
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label "FLEXPWM2_PWM1"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label_STRING_TOKEN FLEXPWM2_PWM1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label_STRING_UPPER_TOKEN FLEXPWM2_PWM1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 12)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 7)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e0000/pwm2
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e0000_S_pwm2
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_PATH "/soc/flexpwm@403e0000/pwm2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_FULL_NAME "pwm2"

/* Node parent (/soc/flexpwm@403e0000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_PARENT DT_N_S_soc_S_flexpwm_403e0000
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_ORD 64

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	61, /* /soc/flexpwm@403e0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_EXISTS 1
#define DT_N_INST_6_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e0000_S_pwm2
#define DT_N_NODELABEL_flexpwm2_pwm2 DT_N_S_soc_S_flexpwm_403e0000_S_pwm2

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_VAL_irq 139
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_index 2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts {139 /* 0x8b */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_IDX_0 139
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label "FLEXPWM2_PWM2"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label_STRING_TOKEN FLEXPWM2_PWM2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label_STRING_UPPER_TOKEN FLEXPWM2_PWM2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 12)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 7)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm2, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm2_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e0000/pwm3
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e0000_S_pwm3
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_PATH "/soc/flexpwm@403e0000/pwm3"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_FULL_NAME "pwm3"

/* Node parent (/soc/flexpwm@403e0000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_PARENT DT_N_S_soc_S_flexpwm_403e0000
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_ORD 65

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	61, /* /soc/flexpwm@403e0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_EXISTS 1
#define DT_N_INST_7_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e0000_S_pwm3
#define DT_N_NODELABEL_flexpwm2_pwm3 DT_N_S_soc_S_flexpwm_403e0000_S_pwm3

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_VAL_irq 140
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_index 3
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts {140 /* 0x8c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_IDX_0 140
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label "FLEXPWM2_PWM3"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label_STRING_TOKEN FLEXPWM2_PWM3
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label_STRING_UPPER_TOKEN FLEXPWM2_PWM3
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 12)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 7)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e0000_S_pwm3, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e0000_S_pwm3_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e4000
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e4000
 *
 * Binding (compatible = nxp,flexpwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,flexpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e4000_PATH "/soc/flexpwm@403e4000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e4000_FULL_NAME "flexpwm@403e4000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexpwm_403e4000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flexpwm_403e4000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3)
#define DT_N_S_soc_S_flexpwm_403e4000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e4000_ORD 66

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e4000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e4000_SUPPORTS_ORDS \
	67, /* /soc/flexpwm@403e4000/pwm0 */ \
	68, /* /soc/flexpwm@403e4000/pwm1 */ \
	69, /* /soc/flexpwm@403e4000/pwm2 */ \
	70, /* /soc/flexpwm@403e4000/pwm3 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e4000_EXISTS 1
#define DT_N_INST_2_nxp_flexpwm DT_N_S_soc_S_flexpwm_403e4000
#define DT_N_NODELABEL_flexpwm3 DT_N_S_soc_S_flexpwm_403e4000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e4000_REG_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_REG_IDX_0_VAL_ADDRESS 1077821440 /* 0x403e4000 */
#define DT_N_S_soc_S_flexpwm_403e4000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_VAL_irq 146
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e4000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_COMPAT_MATCHES_nxp_flexpwm 1
#define DT_N_S_soc_S_flexpwm_403e4000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e4000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg {1077821440 /* 0x403e4000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_IDX_0 1077821440
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000, reg, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000, reg, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts {146 /* 0x92 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_IDX_0 146
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible {"nxp,flexpwm"}
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_IDX_0 "nxp,flexpwm"
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e4000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e4000/pwm0
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e4000_S_pwm0
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_PATH "/soc/flexpwm@403e4000/pwm0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_FULL_NAME "pwm0"

/* Node parent (/soc/flexpwm@403e4000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_PARENT DT_N_S_soc_S_flexpwm_403e4000
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_ORD 67

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	66, /* /soc/flexpwm@403e4000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_EXISTS 1
#define DT_N_INST_8_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e4000_S_pwm0
#define DT_N_NODELABEL_flexpwm3_pwm0 DT_N_S_soc_S_flexpwm_403e4000_S_pwm0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_VAL_irq 142
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_index 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts {142 /* 0x8e */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_IDX_0 142
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label "FLEXPWM3_PWM0"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label_STRING_TOKEN FLEXPWM3_PWM0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label_STRING_UPPER_TOKEN FLEXPWM3_PWM0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 12)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 7)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e4000/pwm1
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e4000_S_pwm1
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_PATH "/soc/flexpwm@403e4000/pwm1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_FULL_NAME "pwm1"

/* Node parent (/soc/flexpwm@403e4000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_PARENT DT_N_S_soc_S_flexpwm_403e4000
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_ORD 68

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	66, /* /soc/flexpwm@403e4000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_EXISTS 1
#define DT_N_INST_9_nxp_imx_pwm      DT_N_S_soc_S_flexpwm_403e4000_S_pwm1
#define DT_N_NODELABEL_flexpwm3_pwm1 DT_N_S_soc_S_flexpwm_403e4000_S_pwm1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_VAL_irq 143
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_index 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts {143 /* 0x8f */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_IDX_0 143
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label "FLEXPWM3_PWM1"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label_STRING_TOKEN FLEXPWM3_PWM1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label_STRING_UPPER_TOKEN FLEXPWM3_PWM1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 12)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 7)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e4000/pwm2
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e4000_S_pwm2
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_PATH "/soc/flexpwm@403e4000/pwm2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_FULL_NAME "pwm2"

/* Node parent (/soc/flexpwm@403e4000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_PARENT DT_N_S_soc_S_flexpwm_403e4000
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_ORD 69

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	66, /* /soc/flexpwm@403e4000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_EXISTS 1
#define DT_N_INST_10_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e4000_S_pwm2
#define DT_N_NODELABEL_flexpwm3_pwm2 DT_N_S_soc_S_flexpwm_403e4000_S_pwm2

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_VAL_irq 144
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_index 2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts {144 /* 0x90 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_IDX_0 144
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label "FLEXPWM3_PWM2"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label_STRING_TOKEN FLEXPWM3_PWM2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label_STRING_UPPER_TOKEN FLEXPWM3_PWM2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 12)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 7)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm2, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm2_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e4000/pwm3
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e4000_S_pwm3
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_PATH "/soc/flexpwm@403e4000/pwm3"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_FULL_NAME "pwm3"

/* Node parent (/soc/flexpwm@403e4000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_PARENT DT_N_S_soc_S_flexpwm_403e4000
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_ORD 70

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	66, /* /soc/flexpwm@403e4000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_EXISTS 1
#define DT_N_INST_11_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e4000_S_pwm3
#define DT_N_NODELABEL_flexpwm3_pwm3 DT_N_S_soc_S_flexpwm_403e4000_S_pwm3

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_VAL_irq 145
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_index 3
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts {145 /* 0x91 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_IDX_0 145
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label "FLEXPWM3_PWM3"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label_STRING_TOKEN FLEXPWM3_PWM3
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label_STRING_UPPER_TOKEN FLEXPWM3_PWM3
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 12)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 7)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e4000_S_pwm3, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e4000_S_pwm3_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e8000
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e8000
 *
 * Binding (compatible = nxp,flexpwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,flexpwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e8000_PATH "/soc/flexpwm@403e8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e8000_FULL_NAME "flexpwm@403e8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexpwm_403e8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flexpwm_403e8000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3)
#define DT_N_S_soc_S_flexpwm_403e8000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e8000_ORD 71

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e8000_SUPPORTS_ORDS \
	72, /* /soc/flexpwm@403e8000/pwm0 */ \
	73, /* /soc/flexpwm@403e8000/pwm1 */ \
	74, /* /soc/flexpwm@403e8000/pwm2 */ \
	75, /* /soc/flexpwm@403e8000/pwm3 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e8000_EXISTS 1
#define DT_N_INST_3_nxp_flexpwm DT_N_S_soc_S_flexpwm_403e8000
#define DT_N_NODELABEL_flexpwm4 DT_N_S_soc_S_flexpwm_403e8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e8000_REG_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_REG_IDX_0_VAL_ADDRESS 1077837824 /* 0x403e8000 */
#define DT_N_S_soc_S_flexpwm_403e8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_VAL_irq 151
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_COMPAT_MATCHES_nxp_flexpwm 1
#define DT_N_S_soc_S_flexpwm_403e8000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg {1077837824 /* 0x403e8000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_IDX_0 1077837824
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000, reg, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000, reg, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts {151 /* 0x97 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_IDX_0 151
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible {"nxp,flexpwm"}
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_IDX_0 "nxp,flexpwm"
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e8000/pwm0
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e8000_S_pwm0
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_PATH "/soc/flexpwm@403e8000/pwm0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_FULL_NAME "pwm0"

/* Node parent (/soc/flexpwm@403e8000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_PARENT DT_N_S_soc_S_flexpwm_403e8000
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_ORD 72

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	71, /* /soc/flexpwm@403e8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_EXISTS 1
#define DT_N_INST_12_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e8000_S_pwm0
#define DT_N_NODELABEL_flexpwm4_pwm0 DT_N_S_soc_S_flexpwm_403e8000_S_pwm0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_VAL_irq 147
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_index 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts {147 /* 0x93 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_IDX_0 147
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label "FLEXPWM4_PWM0"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label_STRING_TOKEN FLEXPWM4_PWM0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label_STRING_UPPER_TOKEN FLEXPWM4_PWM0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 12)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 7)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e8000/pwm1
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e8000_S_pwm1
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_PATH "/soc/flexpwm@403e8000/pwm1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_FULL_NAME "pwm1"

/* Node parent (/soc/flexpwm@403e8000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_PARENT DT_N_S_soc_S_flexpwm_403e8000
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_ORD 73

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	71, /* /soc/flexpwm@403e8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_EXISTS 1
#define DT_N_INST_13_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e8000_S_pwm1
#define DT_N_NODELABEL_flexpwm4_pwm1 DT_N_S_soc_S_flexpwm_403e8000_S_pwm1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_VAL_irq 148
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_index 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts {148 /* 0x94 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_IDX_0 148
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label "FLEXPWM4_PWM1"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label_STRING_TOKEN FLEXPWM4_PWM1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label_STRING_UPPER_TOKEN FLEXPWM4_PWM1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 12)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 7)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e8000/pwm2
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e8000_S_pwm2
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_PATH "/soc/flexpwm@403e8000/pwm2"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_FULL_NAME "pwm2"

/* Node parent (/soc/flexpwm@403e8000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_PARENT DT_N_S_soc_S_flexpwm_403e8000
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_ORD 74

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	71, /* /soc/flexpwm@403e8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_EXISTS 1
#define DT_N_INST_14_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e8000_S_pwm2
#define DT_N_NODELABEL_flexpwm4_pwm2 DT_N_S_soc_S_flexpwm_403e8000_S_pwm2

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_VAL_irq 149
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_index 2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts {149 /* 0x95 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_IDX_0 149
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label "FLEXPWM4_PWM2"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label_STRING_TOKEN FLEXPWM4_PWM2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label_STRING_UPPER_TOKEN FLEXPWM4_PWM2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 12)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 7)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm2, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm2_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexpwm@403e8000/pwm3
 *
 * Node identifier: DT_N_S_soc_S_flexpwm_403e8000_S_pwm3
 *
 * Binding (compatible = nxp,imx-pwm):
 *   $ZEPHYR_BASE\dts\bindings\pwm\nxp,imx-pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_PATH "/soc/flexpwm@403e8000/pwm3"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_FULL_NAME "pwm3"

/* Node parent (/soc/flexpwm@403e8000) identifier: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_PARENT DT_N_S_soc_S_flexpwm_403e8000
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_ORD 75

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_REQUIRES_ORDS \
	8, /* /soc/interrupt-controller@e000e100 */ \
	71, /* /soc/flexpwm@403e8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_EXISTS 1
#define DT_N_INST_15_nxp_imx_pwm     DT_N_S_soc_S_flexpwm_403e8000_S_pwm3
#define DT_N_NODELABEL_flexpwm4_pwm3 DT_N_S_soc_S_flexpwm_403e8000_S_pwm3

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_REG_NUM 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_NUM 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_VAL_irq 150
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_COMPAT_MATCHES_nxp_imx_pwm 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_index 3
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_index_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts {150 /* 0x96 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_IDX_0 150
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, interrupts, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, interrupts, 1)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label "FLEXPWM4_PWM3"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label_STRING_TOKEN FLEXPWM4_PWM3
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label_STRING_UPPER_TOKEN FLEXPWM4_PWM3
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 7) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 8) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 9) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 10) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 11) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 12)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_label_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status "disabled"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 0) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 1) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 2) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 3) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 4) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 5) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 6) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 7)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_status_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible {"nxp,imx-pwm"}
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_IDX_0 "nxp,imx-pwm"
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, compatible, 0)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexpwm_403e8000_S_pwm3, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_LEN 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_wakeup_source 0
#define DT_N_S_soc_S_flexpwm_403e8000_S_pwm3_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexram@400b0000
 *
 * Node identifier: DT_N_S_soc_S_flexram_400b0000
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexram_400b0000_PATH "/soc/flexram@400b0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexram_400b0000_FULL_NAME "flexram@400b0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexram_400b0000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_flexram_400b0000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000)
#define DT_N_S_soc_S_flexram_400b0000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000) 
#define DT_N_S_soc_S_flexram_400b0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexram_400b0000_ORD 76

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexram_400b0000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexram_400b0000_SUPPORTS_ORDS \
	77, /* /soc/flexram@400b0000/dtcm@20000000 */ \
	78, /* /soc/flexram@400b0000/itcm@0 */ \
	79, /* /soc/flexram@400b0000/ocram@20200000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexram_400b0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_flexram DT_N_S_soc_S_flexram_400b0000
#define DT_N_NODELABEL_flexram      DT_N_S_soc_S_flexram_400b0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexram_400b0000_REG_NUM 1
#define DT_N_S_soc_S_flexram_400b0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_REG_IDX_0_VAL_ADDRESS 1074462720 /* 0x400b0000 */
#define DT_N_S_soc_S_flexram_400b0000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_flexram_400b0000_IRQ_NUM 1
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_VAL_irq 38
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexram_400b0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_COMPAT_MATCHES_nxp_imx_flexram 1
#define DT_N_S_soc_S_flexram_400b0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexram_400b0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexram_400b0000_P_compatible {"nxp,imx-flexram"}
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_IDX_0 "nxp,imx-flexram"
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000, compatible, 0)
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexram_400b0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_reg {1074462720 /* 0x400b0000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_flexram_400b0000_P_reg_IDX_0 1074462720
#define DT_N_S_soc_S_flexram_400b0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_flexram_400b0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000, reg, 0) \
	fn(DT_N_S_soc_S_flexram_400b0000, reg, 1)
#define DT_N_S_soc_S_flexram_400b0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexram_400b0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts {38 /* 0x26 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_IDX_0 38
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000, interrupts, 0) \
	fn(DT_N_S_soc_S_flexram_400b0000, interrupts, 1)
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexram_400b0000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_P_interrupts_EXISTS 1

/*
 * Devicetree node: /soc/flexram@400b0000/dtcm@20000000
 *
 * Node identifier: DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000
 *
 * Binding (compatible = nxp,imx-dtcm):
 *   $ZEPHYR_BASE\dts\bindings\arm\nxp,imx-dtcm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_PATH "/soc/flexram@400b0000/dtcm@20000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_FULL_NAME "dtcm@20000000"

/* Node parent (/soc/flexram@400b0000) identifier: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_PARENT DT_N_S_soc_S_flexram_400b0000
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_ORD 77

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_REQUIRES_ORDS \
	76, /* /soc/flexram@400b0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_EXISTS 1
#define DT_N_INST_0_nxp_imx_dtcm DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000
#define DT_N_NODELABEL_dtcm      DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_REG_NUM 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_REG_IDX_0_VAL_SIZE 131072 /* 0x20000 */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_IRQ_NUM 0
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_COMPAT_MATCHES_nxp_imx_dtcm 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg {536870912 /* 0x20000000 */, 131072 /* 0x20000 */}
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_IDX_0 536870912
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_IDX_1 131072
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, reg, 0) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, reg, 1)
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible {"nxp,imx-dtcm"}
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_IDX_0 "nxp,imx-dtcm"
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, compatible, 0)
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_wakeup_source 0
#define DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexram@400b0000/itcm@0
 *
 * Node identifier: DT_N_S_soc_S_flexram_400b0000_S_itcm_0
 *
 * Binding (compatible = nxp,imx-itcm):
 *   $ZEPHYR_BASE\dts\bindings\arm\nxp,imx-itcm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_PATH "/soc/flexram@400b0000/itcm@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_FULL_NAME "itcm@0"

/* Node parent (/soc/flexram@400b0000) identifier: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_PARENT DT_N_S_soc_S_flexram_400b0000
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_ORD 78

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_REQUIRES_ORDS \
	76, /* /soc/flexram@400b0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_EXISTS 1
#define DT_N_INST_0_nxp_imx_itcm DT_N_S_soc_S_flexram_400b0000_S_itcm_0
#define DT_N_NODELABEL_itcm      DT_N_S_soc_S_flexram_400b0000_S_itcm_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_REG_NUM 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_REG_IDX_0_VAL_SIZE 131072 /* 0x20000 */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_IRQ_NUM 0
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_COMPAT_MATCHES_nxp_imx_itcm 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg {0 /* 0x0 */, 131072 /* 0x20000 */}
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_IDX_1 131072
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, reg, 0) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, reg, 1)
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible {"nxp,imx-itcm"}
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_IDX_0 "nxp,imx-itcm"
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, compatible, 0)
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_wakeup_source 0
#define DT_N_S_soc_S_flexram_400b0000_S_itcm_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flexram@400b0000/ocram@20200000
 *
 * Node identifier: DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE\dts\bindings\sram\mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_PATH "/soc/flexram@400b0000/ocram@20200000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_FULL_NAME "ocram@20200000"

/* Node parent (/soc/flexram@400b0000) identifier: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_PARENT DT_N_S_soc_S_flexram_400b0000
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_ORD 79

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_REQUIRES_ORDS \
	76, /* /soc/flexram@400b0000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000
#define DT_N_NODELABEL_ocram  DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_REG_NUM 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_REG_IDX_0_VAL_ADDRESS 538968064 /* 0x20200000 */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_REG_IDX_0_VAL_SIZE 786432 /* 0xc0000 */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_IRQ_NUM 0
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg {538968064 /* 0x20200000 */, 786432 /* 0xc0000 */}
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_IDX_0 538968064
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_IDX_1 786432
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, reg, 0) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, reg, 1)
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, compatible, 0)
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_wakeup_source 0
#define DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@402a8000
 *
 * Node identifier: DT_N_S_soc_S_spi_402a8000
 *
 * Binding (compatible = nxp,imx-flexspi):
 *   $ZEPHYR_BASE\dts\bindings\spi\nxp,imx-flexspi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_402a8000_PATH "/soc/spi@402a8000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_402a8000_FULL_NAME "spi@402a8000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_402a8000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_spi_402a8000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0)
#define DT_N_S_soc_S_spi_402a8000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0) 
#define DT_N_S_soc_S_spi_402a8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_402a8000_ORD 80

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_402a8000_REQUIRES_ORDS \
	7, /* /soc */ \
	8, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_402a8000_SUPPORTS_ORDS \
	81, /* /soc/spi@402a8000/w25q16jvuxim@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_402a8000_EXISTS 1
#define DT_N_INST_0_nxp_imx_flexspi DT_N_S_soc_S_spi_402a8000
#define DT_N_NODELABEL_flexspi      DT_N_S_soc_S_spi_402a8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_402a8000_REG_NUM 2
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_0_VAL_ADDRESS 1076527104 /* 0x402a8000 */
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_1_VAL_ADDRESS 1610612736 /* 0x60000000 */
#define DT_N_S_soc_S_spi_402a8000_REG_IDX_1_VAL_SIZE 2097152 /* 0x200000 */
#define DT_N_S_soc_S_spi_402a8000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_VAL_irq 108
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_spi_402a8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_COMPAT_MATCHES_nxp_imx_flexspi 1
#define DT_N_S_soc_S_spi_402a8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_402a8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_402a8000_P_reg {1076527104 /* 0x402a8000 */, 16384 /* 0x4000 */, 1610612736 /* 0x60000000 */, 2097152 /* 0x200000 */}
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_0 1076527104
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_2 1610612736
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_3 2097152
#define DT_N_S_soc_S_spi_402a8000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000, reg, 0) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 1) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 2) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 3)
#define DT_N_S_soc_S_spi_402a8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_interrupts {108 /* 0x6c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_IDX_0 108
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000, interrupts, 0) \
	fn(DT_N_S_soc_S_spi_402a8000, interrupts, 1)
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_bufferable 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_bufferable_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_cacheable 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_cacheable_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_prefetch 0
#define DT_N_S_soc_S_spi_402a8000_P_ahb_prefetch_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_ahb_read_addr_opt 0
#define DT_N_S_soc_S_spi_402a8000_P_ahb_read_addr_opt_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_combination_mode 0
#define DT_N_S_soc_S_spi_402a8000_P_combination_mode_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_sck_differential_clock 0
#define DT_N_S_soc_S_spi_402a8000_P_sck_differential_clock_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_rx_clock_source 0
#define DT_N_S_soc_S_spi_402a8000_P_rx_clock_source_ENUM_IDX 0
#define DT_N_S_soc_S_spi_402a8000_P_rx_clock_source_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_label "FLEXSPI"
#define DT_N_S_soc_S_spi_402a8000_P_label_STRING_TOKEN FLEXSPI
#define DT_N_S_soc_S_spi_402a8000_P_label_STRING_UPPER_TOKEN FLEXSPI
#define DT_N_S_soc_S_spi_402a8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000, label, 0) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 1) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 2) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 3) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 4) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 5) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 6)
#define DT_N_S_soc_S_spi_402a8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_status "disabled"
#define DT_N_S_soc_S_spi_402a8000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_402a8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_402a8000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_402a8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_402a8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_402a8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000, status, 0) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 1) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 2) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 3) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 4) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 5) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 6) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 7)
#define DT_N_S_soc_S_spi_402a8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_compatible {"nxp,imx-flexspi"}
#define DT_N_S_soc_S_spi_402a8000_P_compatible_IDX_0 "nxp,imx-flexspi"
#define DT_N_S_soc_S_spi_402a8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000, compatible, 0)
#define DT_N_S_soc_S_spi_402a8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_402a8000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_402a8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/spi@402a8000/w25q16jvuxim@0
 *
 * Node identifier: DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0
 *
 * Binding (compatible = jedec,spi-nor):
 *   $ZEPHYR_BASE\dts\bindings\mtd\jedec,spi-nor.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_PATH "/soc/spi@402a8000/w25q16jvuxim@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_FULL_NAME "w25q16jvuxim@0"

/* Node parent (/soc/spi@402a8000) identifier: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_PARENT DT_N_S_soc_S_spi_402a8000
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_ORD 81

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_REQUIRES_ORDS \
	80, /* /soc/spi@402a8000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_EXISTS 1
#define DT_N_INST_0_winbond_w25q16jvuxim DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0
#define DT_N_INST_0_jedec_spi_nor        DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0
#define DT_N_NODELABEL_w25q16jvuxim      DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0

/* Bus info (controller: '/soc/spi@402a8000', type: 'spi') */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_BUS_spi 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_BUS DT_N_S_soc_S_spi_402a8000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_REG_NUM 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_IRQ_NUM 0
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_COMPAT_MATCHES_winbond_w25q16jvuxim 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_COMPAT_MATCHES_jedec_spi_nor 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, reg, 0)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_spi_max_frequency 133000000
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_spi_max_frequency_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label "W25Q16JVUXIM"
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label_STRING_TOKEN W25Q16JVUXIM
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label_STRING_UPPER_TOKEN W25Q16JVUXIM
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 0) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 1) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 2) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 3) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 4) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 5) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 6) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 7) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 8) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 9) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 10) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 11)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_label_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status "okay"
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 0) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 1) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 2) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 3)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible {"winbond,w25q16jvuxim", "jedec,spi-nor"}
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_IDX_0 "winbond,w25q16jvuxim"
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_IDX_1 "jedec,spi-nor"
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, compatible, 0) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, compatible, 1)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_LEN 2
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_wakeup_source 0
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_requires_ulbpr 0
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_requires_ulbpr_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_has_dpd 0
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_has_dpd_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id {239 /* 0xef */, 64 /* 0x40 */, 21 /* 0x15 */}
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_0 239
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_1 64
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_2 21
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 0) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 1) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 2)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, jedec_id, 2, __VA_ARGS__)
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_LEN 3
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_jedec_id_EXISTS 1
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_size 16777208
#define DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0_P_size_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_entropy            DT_N_S_soc_S_random_400cc000
#define DT_CHOSEN_zephyr_entropy_EXISTS     1
#define DT_CHOSEN_zephyr_sram               DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000
#define DT_CHOSEN_zephyr_sram_EXISTS        1
#define DT_CHOSEN_zephyr_itcm               DT_N_S_soc_S_flexram_400b0000_S_itcm_0
#define DT_CHOSEN_zephyr_itcm_EXISTS        1
#define DT_CHOSEN_zephyr_dtcm               DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000
#define DT_CHOSEN_zephyr_dtcm_EXISTS        1
#define DT_CHOSEN_zephyr_console            DT_N_S_soc_S_uart_40198000
#define DT_CHOSEN_zephyr_console_EXISTS     1
#define DT_CHOSEN_zephyr_can_primary        DT_N_S_soc_S_can_401d0000
#define DT_CHOSEN_zephyr_can_primary_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_nxp_mimxrt1062 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v7m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_systick 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_flexram 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_itcm 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_dtcm 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_winbond_w25q16jvuxim 1
#define DT_COMPAT_HAS_OKAY_jedec_spi_nor 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_semc 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_gpt 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_ccm 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_gpio 1
#define DT_COMPAT_HAS_OKAY_nxp_kinetis_lpuart 1
#define DT_COMPAT_HAS_OKAY_nxp_flexpwm 1
#define DT_COMPAT_HAS_OKAY_nxp_kinetis_trng 1
#define DT_COMPAT_HAS_OKAY_nxp_mcux_usbd 1
#define DT_COMPAT_HAS_OKAY_nxp_mcux_edma 1
#define DT_COMPAT_HAS_OKAY_nxp_kinetis_flexcan 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m7 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_mpu 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_nxp_mimxrt1062_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v7m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_systick_NUM_OKAY 1
#define DT_N_INST_nxp_imx_flexram_NUM_OKAY 1
#define DT_N_INST_nxp_imx_itcm_NUM_OKAY 1
#define DT_N_INST_nxp_imx_dtcm_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_winbond_w25q16jvuxim_NUM_OKAY 1
#define DT_N_INST_jedec_spi_nor_NUM_OKAY 1
#define DT_N_INST_nxp_imx_semc_NUM_OKAY 1
#define DT_N_INST_nxp_imx_gpt_NUM_OKAY 2
#define DT_N_INST_nxp_imx_ccm_NUM_OKAY 1
#define DT_N_INST_nxp_imx_gpio_NUM_OKAY 5
#define DT_N_INST_nxp_kinetis_lpuart_NUM_OKAY 1
#define DT_N_INST_nxp_flexpwm_NUM_OKAY 4
#define DT_N_INST_nxp_kinetis_trng_NUM_OKAY 1
#define DT_N_INST_nxp_mcux_usbd_NUM_OKAY 1
#define DT_N_INST_nxp_mcux_edma_NUM_OKAY 1
#define DT_N_INST_nxp_kinetis_flexcan_NUM_OKAY 1
#define DT_N_INST_arm_cortex_m7_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_mpu_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_FOREACH_OKAY_nxp_mimxrt1062(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_nxp_mimxrt1062(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_mimxrt1062(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_mimxrt1062(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v7m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v7m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v7m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v7m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_flexram(fn) fn(DT_N_S_soc_S_flexram_400b0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_flexram(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_flexram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_flexram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_itcm(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_itcm(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_itcm_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_itcm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_itcm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_dtcm(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_dtcm(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_dtcm_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_dtcm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_dtcm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_flexram_400b0000_S_ocram_20200000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_winbond_w25q16jvuxim(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0)
#define DT_FOREACH_OKAY_VARGS_winbond_w25q16jvuxim(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_winbond_w25q16jvuxim(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_winbond_w25q16jvuxim(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_jedec_spi_nor(fn) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0)
#define DT_FOREACH_OKAY_VARGS_jedec_spi_nor(fn, ...) fn(DT_N_S_soc_S_spi_402a8000_S_w25q16jvuxim_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_jedec_spi_nor(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_jedec_spi_nor(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_semc(fn) fn(DT_N_S_soc_S_semc0_402f0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_semc(fn, ...) fn(DT_N_S_soc_S_semc0_402f0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_semc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_semc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_gpt(fn) fn(DT_N_S_soc_S_gpt_401ec000) fn(DT_N_S_soc_S_gpt_401f0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_gpt(fn, ...) fn(DT_N_S_soc_S_gpt_401ec000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_401f0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_gpt(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_gpt(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_ccm(fn) fn(DT_N_S_soc_S_ccm_400fc000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_ccm(fn, ...) fn(DT_N_S_soc_S_ccm_400fc000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_ccm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_ccm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_gpio(fn) fn(DT_N_S_soc_S_gpio_401b8000) fn(DT_N_S_soc_S_gpio_401bc000) fn(DT_N_S_soc_S_gpio_401c0000) fn(DT_N_S_soc_S_gpio_401c4000) fn(DT_N_S_soc_S_gpio_400c0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_401b8000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401bc000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_401c4000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_400c0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_gpio(fn) fn(0) fn(1) fn(2) fn(3) fn(4)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_kinetis_lpuart(fn) fn(DT_N_S_soc_S_uart_40198000)
#define DT_FOREACH_OKAY_VARGS_nxp_kinetis_lpuart(fn, ...) fn(DT_N_S_soc_S_uart_40198000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_kinetis_lpuart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_kinetis_lpuart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_flexpwm(fn) fn(DT_N_S_soc_S_flexpwm_403dc000) fn(DT_N_S_soc_S_flexpwm_403e0000) fn(DT_N_S_soc_S_flexpwm_403e4000) fn(DT_N_S_soc_S_flexpwm_403e8000)
#define DT_FOREACH_OKAY_VARGS_nxp_flexpwm(fn, ...) fn(DT_N_S_soc_S_flexpwm_403dc000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e4000, __VA_ARGS__) fn(DT_N_S_soc_S_flexpwm_403e8000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_flexpwm(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_flexpwm(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_kinetis_trng(fn) fn(DT_N_S_soc_S_random_400cc000)
#define DT_FOREACH_OKAY_VARGS_nxp_kinetis_trng(fn, ...) fn(DT_N_S_soc_S_random_400cc000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_kinetis_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_kinetis_trng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_mcux_usbd(fn) fn(DT_N_S_soc_S_usbd_402e0000)
#define DT_FOREACH_OKAY_VARGS_nxp_mcux_usbd(fn, ...) fn(DT_N_S_soc_S_usbd_402e0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_mcux_usbd(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_mcux_usbd(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_mcux_edma(fn) fn(DT_N_S_soc_S_dma_controller_400e8000)
#define DT_FOREACH_OKAY_VARGS_nxp_mcux_edma(fn, ...) fn(DT_N_S_soc_S_dma_controller_400e8000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_mcux_edma(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_mcux_edma(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_kinetis_flexcan(fn) fn(DT_N_S_soc_S_can_401d0000)
#define DT_FOREACH_OKAY_VARGS_nxp_kinetis_flexcan(fn, ...) fn(DT_N_S_soc_S_can_401d0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_kinetis_flexcan(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_kinetis_flexcan(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m7(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m7(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m7(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m7(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_mpu(fn) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_mpu(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_mpu_e000ed90, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_mpu(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_mpu(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_system_clock)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_winbond_w25q16jvuxim_BUS_spi 1
#define DT_COMPAT_jedec_spi_nor_BUS_spi 1
